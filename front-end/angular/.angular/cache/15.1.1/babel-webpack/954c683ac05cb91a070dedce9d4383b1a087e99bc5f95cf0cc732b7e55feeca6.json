{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { createEffect, Actions } from '@ngrx/effects';\nimport { map, filter } from 'rxjs/operators';\nimport { isErrorAction, showMessage, isSuccessActionToShow } from './message/message.actions';\nlet AppEffects = class AppEffects {\n  constructor(actions$) {\n    this.actions$ = actions$;\n    this._errors$ = createEffect(() => this.actions$.pipe(filter(isErrorAction), map(e => showMessage({\n      message: {\n        id: Math.floor(Math.random() * 1000000),\n        hasBeenShown: false,\n        message: e.error,\n        severity: 'error'\n      }\n    }))));\n    this._success$ = createEffect(() => this.actions$.pipe(filter(isSuccessActionToShow), map(e => showMessage({\n      message: {\n        id: Math.floor(Math.random() * 1000000),\n        hasBeenShown: false,\n        message: e.successMessage,\n        severity: 'success'\n      }\n    }))));\n  }\n};\nAppEffects.ctorParameters = () => [{\n  type: Actions\n}];\nAppEffects = __decorate([Injectable()], AppEffects);\nexport { AppEffects };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AACrD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;AAC5C,SAASC,aAAa,EAAEC,WAAW,EAAEC,qBAAqB,QAAQ,2BAA2B;AAGtF,IAAMC,UAAU,GAAhB,MAAMA,UAAU;EAEnBC,YACYC,QAAiB;IAAjB,aAAQ,GAARA,QAAQ;IAGpB,aAAQ,GAAGT,YAAY,CACnB,MAAM,IAAI,CAACS,QAAQ,CAACC,IAAI,CACpBP,MAAM,CAACC,aAAa,CAAC,EACrBF,GAAG,CAACS,CAAC,IAAIN,WAAW,CAAC;MAAEO,OAAO,EAAE;QAAEC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,OAAS,CAAC;QAAEC,YAAY,EAAE,KAAK;QAAEL,OAAO,EAAED,CAAC,CAACO,KAAK;QAAEC,QAAQ,EAAE;MAAO;IAAE,CAAC,CAAC,CAAC,CAC7I,CACJ;IAED,cAAS,GAAGnB,YAAY,CACpB,MAAM,IAAI,CAACS,QAAQ,CAACC,IAAI,CACpBP,MAAM,CAACG,qBAAqB,CAAC,EAC7BJ,GAAG,CAACS,CAAC,IAAIN,WAAW,CAAC;MAAEO,OAAO,EAAE;QAAEC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,OAAS,CAAC;QAAEC,YAAY,EAAE,KAAK;QAAEL,OAAO,EAAED,CAAC,CAACS,cAAc;QAAED,QAAQ,EAAE;MAAS;IAAE,CAAC,CAAC,CAAC,CACxJ,CACJ;EAdK;;;;;AAJGZ,UAAU,eADtBR,UAAU,EAAE,GACAQ,UAAU,CAmBtB;SAnBYA,UAAU","names":["Injectable","createEffect","Actions","map","filter","isErrorAction","showMessage","isSuccessActionToShow","AppEffects","constructor","actions$","pipe","e","message","id","Math","floor","random","hasBeenShown","error","severity","successMessage"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\redux\\effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { createEffect, Actions } from '@ngrx/effects';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { isErrorAction, showMessage, isSuccessActionToShow } from './message/message.actions';\r\n\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n      ) { }\r\n\r\n    _errors$ = createEffect(\r\n        () => this.actions$.pipe(\r\n            filter(isErrorAction),\r\n            map(e => showMessage({ message: { id: Math.floor(Math.random() * 1_000_000), hasBeenShown: false, message: e.error, severity: 'error' }}))\r\n        )\r\n    );\r\n\r\n    _success$ = createEffect(\r\n        () => this.actions$.pipe(\r\n            filter(isSuccessActionToShow),\r\n            map(e => showMessage({ message: { id: Math.floor(Math.random() * 1_000_000), hasBeenShown: false, message: e.successMessage, severity: 'success' }}))\r\n        )\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}