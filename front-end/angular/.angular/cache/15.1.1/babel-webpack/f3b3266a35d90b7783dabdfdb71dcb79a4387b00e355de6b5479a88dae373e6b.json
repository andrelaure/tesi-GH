{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\nimport { environment } from 'src/environments/environment';\nimport { changeSampleDataFilters, searchSampleData, searchSampleDataError, searchSampleDataSuccess } from './sample.actions';\nlet SampleEffect = class SampleEffect {\n  constructor(actions$, httpClient) {\n    this.actions$ = actions$;\n    this.httpClient = httpClient;\n    this._serachSampleData = createEffect(() => this.actions$.pipe(ofType(searchSampleData), mergeMap(a => {\n      const response$ = this.httpClient.post(`${environment.apiUrl}/sample/searchSampleData`, a.queryParams, {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => searchSampleDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [searchSampleDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n    this._changeSampleDataFilters = createEffect(() => this.actions$.pipe(ofType(changeSampleDataFilters), map(a => searchSampleData({\n      queryParams: a.queryParams,\n      _id: a._id\n    }))));\n  }\n};\nSampleEffect.ctorParameters = () => [{\n  type: Actions\n}, {\n  type: CustomHttpClient\n}];\nSampleEffect = __decorate([Injectable()], SampleEffect);\nexport { SampleEffect };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,MAAM,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAC7D,SAASC,GAAG,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAC1D,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,uBAAuB,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,uBAAuB,QAAO,kBAAkB;AAKpH,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAErBC,YACYC,QAAiB,EACjBC,UAA4B;IAD5B,aAAQ,GAARD,QAAQ;IACR,eAAU,GAAVC,UAAU;IAGtB,sBAAiB,GAAGd,YAAY,CAC5B,MAAM,IAAI,CAACa,QAAQ,CAACE,IAAI,CACpBhB,MAAM,CAACS,gBAAgB,CAAC,EACxBL,QAAQ,CAACa,CAAC,IAAG;MACT,MAAMC,SAAS,GAAG,IAAI,CAACH,UAAU,CAACI,IAAI,CAAe,GAAGZ,WAAW,CAACa,MAAM,0BAA0B,EAAEH,CAAC,CAACI,WAAW,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAC,CAAC;MAC7I,OAAOJ,SAAS,CAACF,IAAI,CACjBb,GAAG,CAACoB,CAAC,IAAIZ,uBAAuB,CAAC;QAACa,MAAM,EAAED,CAAC;QAAEE,GAAG,EAAER,CAAC,CAACQ;MAAG,CAAE,CAAC,CAAC,EAC3DpB,UAAU,CAAC,CAACqB,GAAsB,EAAEC,CAAC,KAAI;QACrC,OAAO,CAACjB,qBAAqB,CAAC;UAACkB,KAAK,EAAEF,GAAG,CAACG,OAAO;UAAEJ,GAAG,EAAER,CAAC,CAACQ;QAAG,CAAC,CAAC,CAAC;MACpE,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CACV;IAED,6BAAwB,GAAGxB,YAAY,CACnC,MAAM,IAAI,CAACa,QAAQ,CAACE,IAAI,CACpBhB,MAAM,CAACQ,uBAAuB,CAAC,EAC/BL,GAAG,CAACc,CAAC,IAAIR,gBAAgB,CAAC;MAACY,WAAW,EAAEJ,CAAC,CAACI,WAAW;MAAEI,GAAG,EAAER,CAAC,CAACQ;IAAG,CAAC,CAAC,CAAC,CAAC,CAC5E;EAnBK;;;;;;;AALGb,YAAY,eADxBb,UAAU,EAAE,GACAa,YAAY,CA0BxB;SA1BYA,YAAY","names":["Injectable","ofType","createEffect","Actions","map","mergeMap","catchError","CustomHttpClient","environment","changeSampleDataFilters","searchSampleData","searchSampleDataError","searchSampleDataSuccess","SampleEffect","constructor","actions$","httpClient","pipe","a","response$","post","apiUrl","queryParams","responseType","r","result","_id","err","_","error","message"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\redux\\sample\\sample.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\r\nimport { map, mergeMap, catchError } from 'rxjs/operators';\r\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { changeSampleDataFilters, searchSampleData, searchSampleDataError, searchSampleDataSuccess} from './sample.actions';\r\nimport { SampleData } from './sample.state';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class SampleEffect {\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private httpClient: CustomHttpClient\r\n      ) { }\r\n\r\n    _serachSampleData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(searchSampleData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.post<SampleData[]>(`${environment.apiUrl}/sample/searchSampleData`, a.queryParams, { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => searchSampleDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [searchSampleDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n\r\n    _changeSampleDataFilters = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(changeSampleDataFilters),\r\n            map(a => searchSampleData({queryParams: a.queryParams, _id: a._id})))\r\n    );\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}