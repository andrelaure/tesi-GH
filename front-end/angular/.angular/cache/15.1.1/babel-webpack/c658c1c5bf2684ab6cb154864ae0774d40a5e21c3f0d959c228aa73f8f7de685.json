{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, NgZone } from '@angular/core';\nimport { HttpClient as AngularHttpClient } from '@angular/common/http';\nimport { combineLatest, of, throwError, timer } from 'rxjs';\nimport { filter, retryWhen, finalize, mergeMap, map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AwaitAndGetStopper } from '../components/awaiter/awaiter.utils';\nimport { environment } from '../../environments/environment';\nimport { OAuthService } from \"angular-oauth2-oidc\";\nexport function ensureLastSlash(url) {\n  return url.endsWith(\"/\") ? url : url + \"/\";\n}\nfunction isHttpHeaders(h) {\n  return h && h.append !== undefined;\n}\n;\nfunction setAuthHttpHeaders(token, options) {\n  return Object.assign(Object.assign({}, options), {\n    headers: isHttpHeaders(options.headers) ? options.headers.set('Authorization', `Bearer ${token}`).set('client_id', environment.authConfig.clientId) : Object.assign(Object.assign({}, options.headers), {\n      'Authorization': `Bearer ${token}`,\n      'client_id': environment.authConfig.clientId\n    })\n  });\n}\nlet CustomHttpClient = class CustomHttpClient {\n  constructor(httpClient, oauthService, store, zone) {\n    this.httpClient = httpClient;\n    this.oauthService = oauthService;\n    this.store = store;\n    this.zone = zone;\n    this._customParams = [];\n  }\n  set customParams(params) {\n    this._customParams = params;\n  }\n  get innerClient() {\n    return this.httpClient;\n  }\n  combineWithPolicies$(_, ob) {\n    const stopWaiting = AwaitAndGetStopper(this.store);\n    return combineLatest([of(this.oauthService.hasValidAccessToken()), of(this.oauthService.getAccessToken())]).pipe(filter(([isAuth, _]) => isAuth), filter(([_, token]) => token && token !== ''), map(([_, token]) => token), mergeMap(token => ob(token).pipe(retryWhen(err$ => err$.pipe(mergeMap((err, i) => {\n      if (i >= 3) {\n        return throwError(err);\n      } else {\n        console.warn(`Retry number ${i + 1} because of error: ${err.message}`);\n        return timer(1000);\n      }\n    }))), finalize(() => stopWaiting()))));\n  }\n  patch(url, body, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"PATCH\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.patch(url, body, setAuthHttpHeaders(token, options))));\n  }\n  put(url, body, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"PUT\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.put(url, body, setAuthHttpHeaders(token, options))));\n  }\n  delete(url, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"DELETE\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.delete(url, setAuthHttpHeaders(token, options))));\n  }\n  options(url, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"OPTIONS\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.options(url, setAuthHttpHeaders(token, options))));\n  }\n  getBlob(url, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"GET\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => {\n      const usedOptions = setAuthHttpHeaders(token, options);\n      return this.zone.runOutsideAngular(() => this.httpClient.get(url, usedOptions));\n    });\n  }\n  postBlob(url, body, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"POST\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.post(url, body, setAuthHttpHeaders(token, options))));\n  }\n  get(url, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"GET\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => {\n      const usedParam = setAuthHttpHeaders(token, options);\n      return this.zone.runOutsideAngular(() => this.httpClient.get(url, usedParam));\n    });\n  }\n  postText(url, body, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"POST\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => {\n      const usedParam = setAuthHttpHeaders(token, options);\n      return this.zone.runOutsideAngular(() => this.httpClient.post(url, body, usedParam));\n    });\n  }\n  post(url, body, options) {\n    return this.combineWithPolicies$({\n      route: url,\n      method: \"POST\",\n      params: options && options.customParams ? options.customParams : this._customParams\n    }, token => this.zone.runOutsideAngular(() => this.httpClient.post(url, body, setAuthHttpHeaders(token, options))));\n  }\n};\nCustomHttpClient.ctorParameters = () => [{\n  type: AngularHttpClient\n}, {\n  type: OAuthService\n}, {\n  type: Store\n}, {\n  type: NgZone\n}];\nCustomHttpClient = __decorate([Injectable({\n  providedIn: 'root'\n})], CustomHttpClient);\nexport { CustomHttpClient };","map":{"version":3,"mappings":"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","names":["Injectable","NgZone","HttpClient","AngularHttpClient","combineLatest","of","throwError","timer","filter","retryWhen","finalize","mergeMap","map","Store","AwaitAndGetStopper","environment","OAuthService","ensureLastSlash","url","endsWith","isHttpHeaders","h","append","undefined","setAuthHttpHeaders","token","options","headers","set","authConfig","clientId","Object","CustomHttpClient","constructor","httpClient","oauthService","store","zone","customParams","params","_customParams","innerClient","combineWithPolicies$","_","ob","stopWaiting","hasValidAccessToken","getAccessToken","pipe","isAuth","err$","err","i","console","warn","message","patch","body","route","method","runOutsideAngular","put","delete","getBlob","usedOptions","get","postBlob","post","usedParam","postText","providedIn"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\services\\custom-http-client.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\nimport { HttpClient as AngularHttpClient, HttpHeaders, HttpParams, HttpContext, HttpErrorResponse } from '@angular/common/http';\r\nimport { combineLatest, Observable, of, throwError, timer } from 'rxjs';\r\nimport { filter, retryWhen, finalize, mergeMap, map } from 'rxjs/operators';\r\nimport * as _ from \"lodash\";\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../redux/state';\r\nimport { AwaitAndGetStopper } from '../components/awaiter/awaiter.utils';\r\nimport { environment } from '../../environments/environment';\r\nimport { OAuthService } from \"angular-oauth2-oidc\";\r\n\r\nexport function ensureLastSlash(url: string) {\r\n    return url.endsWith(\"/\") ? url : url + \"/\";\r\n}\r\n\r\nexport interface ApiInfo {\r\n    route: string;\r\n    method: string;\r\n    params?: string[];\r\n}\r\n\r\nfunction isHttpHeaders(h: HttpHeaders | {[header: string]: string | string[]}): h is HttpHeaders {\r\n    return h && h.append !== undefined;\r\n}\r\n\r\ntype ResponseTypes = 'json' | 'blob' | 'arraybuffer' | 'text';\r\ninterface IOptions<T extends ResponseTypes> {\r\n    headers?: HttpHeaders | {\r\n        [header: string]: string | string[];\r\n    };\r\n    context?: HttpContext;\r\n    observe?: 'body';\r\n    params?: HttpParams | {\r\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n    };\r\n    reportProgress?: boolean;\r\n    responseType: T;\r\n    withCredentials?: boolean;\r\n};\r\n\r\ninterface IRawOptions {customParams?: string[]}\r\n\r\ntype Options<T extends ResponseTypes> = IOptions<T> & IRawOptions & {context?: HttpContext};\r\n\r\nfunction setAuthHttpHeaders<T extends ResponseTypes>(token: string, options: Options<T>) : Options<T> {\r\n    return {\r\n        ...options,\r\n        headers: isHttpHeaders(options.headers) ?\r\n        options.headers.set('Authorization', `Bearer ${token}`).set('client_id', environment.authConfig.clientId) :\r\n        {...options.headers, 'Authorization': `Bearer ${token}`, 'client_id': environment.authConfig.clientId}\r\n    };\r\n}\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CustomHttpClient {\r\n    constructor(\r\n        private httpClient: AngularHttpClient,\r\n        private oauthService: OAuthService,\r\n        private store: Store<AppState>,\r\n        private zone: NgZone\r\n    ) { }\r\n\r\n    public handler: any;\r\n\r\n    private _customParams: string[] = [];\r\n    public set customParams(params: string[]) {\r\n        this._customParams = params;\r\n    }\r\n\r\n    public get innerClient(): AngularHttpClient {\r\n        return this.httpClient;\r\n    }\r\n\r\n    private combineWithPolicies$<T>(_: ApiInfo, ob: (token: string) => Observable<T | null>): Observable<T | null> {\r\n        const stopWaiting = AwaitAndGetStopper(this.store);\r\n        return combineLatest([\r\n            of(this.oauthService.hasValidAccessToken()),\r\n            of(this.oauthService.getAccessToken())\r\n        ]).pipe(\r\n            filter(([isAuth, _]) => isAuth),\r\n            filter(([_, token]) => token && token !== ''),\r\n            map(([_, token]) => token),\r\n            mergeMap(token => ob(token)\r\n            .pipe(\r\n               retryWhen(err$ => err$.pipe(\r\n                    mergeMap((err: HttpErrorResponse, i) => {\r\n                        if (i >= 3) {\r\n                            return throwError(err);\r\n                        } else {\r\n                            console.warn(`Retry number ${i+1} because of error: ${(err.message)}`);\r\n                            return timer(1000);\r\n                        }\r\n                    }),\r\n                )),\r\n                finalize(() => stopWaiting())\r\n            ))\r\n        );\r\n    }\r\n\r\n    public patch<T>(url: string, body: any | null, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"PATCH\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.patch<T>(url, body, setAuthHttpHeaders(token, options))));\r\n    }\r\n\r\n    public put<T>(url: string, body: any | null, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"PUT\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.put<T>(url, body, setAuthHttpHeaders(token, options))));\r\n    }\r\n\r\n    public delete<T>(url: string, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"DELETE\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.delete<T>(url, setAuthHttpHeaders(token, options))));\r\n    }\r\n\r\n    public options<T>(url: string, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"OPTIONS\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.options<T>(url, setAuthHttpHeaders(token, options))));\r\n    }\r\n\r\n    public getBlob(url: string, options: Options<'blob'>): Observable<Blob> {\r\n        return this.combineWithPolicies$<Blob>(\r\n            {route: url, method: \"GET\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => {\r\n                const usedOptions = setAuthHttpHeaders<'blob'>(token, options);\r\n                return this.zone.runOutsideAngular(() => this.httpClient.get(url, usedOptions));\r\n            });\r\n    }\r\n\r\n    public postBlob(url: string, body: any | null, options: Options<'blob'>): Observable<Blob> {\r\n        return this.combineWithPolicies$<Blob>(\r\n            {route: url, method: \"POST\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.post(url, body, setAuthHttpHeaders(token, options))));\r\n    }\r\n\r\n    public get<T>(url: string, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"GET\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => {\r\n                const usedParam = setAuthHttpHeaders<'json'>(token, options);\r\n                return this.zone.runOutsideAngular(() => this.httpClient.get<T>(url, usedParam));\r\n            });\r\n    }\r\n\r\n    public postText(url: string, body: any | null, options: Options<'text'>): Observable<string> {\r\n        return this.combineWithPolicies$<string>(\r\n            {route: url, method: \"POST\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => {\r\n                const usedParam = setAuthHttpHeaders<'text'>(token, options);\r\n                return this.zone.runOutsideAngular(() => this.httpClient.post(url, body, usedParam));\r\n            });\r\n    }\r\n\r\n    public post<T>(url: string, body: any | null, options?: Options<'json'>): Observable<T | null> {\r\n        return this.combineWithPolicies$<T>(\r\n            {route: url, method: \"POST\", params: options && options.customParams ? options.customParams : this._customParams },\r\n            (token) => this.zone.runOutsideAngular(() => this.httpClient.post<T>(url, body, setAuthHttpHeaders(token, options))));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}