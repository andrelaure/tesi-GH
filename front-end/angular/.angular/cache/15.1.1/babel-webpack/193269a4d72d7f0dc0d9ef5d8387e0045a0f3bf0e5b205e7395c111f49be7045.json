{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Subject, of } from \"rxjs\";\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  constructor() {\n    this.notification = {\n      noticeId: 0,\n      noticeState: false,\n      noticeDateTime: new Date(),\n      noticeTitle: '',\n      noticeObject: '',\n      noticeDesc: '',\n      userId: null\n    };\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }, {\n      usersId: \"Utente 4\"\n    }, {\n      usersId: \"Utente 5\"\n    }, {\n      usersId: \"Utente 6\"\n    }];\n    this.selectedUsers = [];\n    this.lastSearch$ = of(null);\n    this.noticeData$ = of([]);\n    this.noticeDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.notification);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n  }\n  addNotice(notice) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(', ');\n      this.notification.userId = usersIdAsString;\n    }\n    console.log(\"Notifica aggiunta:\", this.notification);\n  }\n  deleteNotice(notice) {\n    // onCascade a tutti quelli a cui è stata inviata\n  }\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n};\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  imports: [InputTextModule, InputTextareaModule],\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAA2B,eAAe;AAC5D,SAAqBC,OAAO,EAAyBC,EAAE,QAAQ,MAAM;AACrE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,mBAAmB,QAAQ,uBAAuB;AAgBpD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAAhCC;IAEH,iBAAY,GAAwB;MAChCC,QAAQ,EAAE,CAAC;MACXC,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE,IAAIC,IAAI,EAAE;MAC1BC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE;KACT;IAEH,YAAO,GAAU,CACb;MAAEC,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,CAC1B;IAED,kBAAa,GAAU,EAAE;IAmBzB,gBAAW,GAAuBb,EAAE,CAAC,IAAI,CAAC;IAC1C,gBAAW,GAA6BA,EAAE,CAAC,EAAE,CAAC;IAC9C,uBAAkB,GAAiCA,EAAE,CAAC,EAAE,CAAC;IAEzD,kBAAa,GAAuBA,EAAE,CAAC,CAAC,CAAC;IAEzC,wBAAmB,GAAGc,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC;IACpD,iBAAY,GAAG,IAAIjB,OAAO,EAAU;IAG5B,gBAAW,GAAY,IAAI;EAUvC;EArCIkB,SAAS,CAACC,MAAiB;IAEvB,IAAI,IAAI,CAACC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAC;MAC9B,MAAMC,gBAAgB,GAAa,IAAI,CAACF,aAAa,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACV,OAAO,CAAC;MACjF,MAAMW,eAAe,GAAWH,gBAAgB,CAACI,IAAI,CAAC,IAAI,CAAC;MAC3D,IAAI,CAACT,YAAY,CAACJ,MAAM,GAAGY,eAAe;;IAI9CE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACX,YAAY,CAAC;EACxD;EAEAY,YAAY,CAACV,MAAiB;IAC1B;EAAA;EAgBJ,IAAIW,kBAAkB;IAClB,OAAO,IAAI,CAACC,mBAAmB;EACnC;EACA,IAAID,kBAAkB,CAACE,KAAiB;IACpC,IAAI,CAACD,mBAAmB,GAAGC,KAAK;EACpC;CAGH;AA5DY5B,0BAA0B,eARtCL,SAAS,CAAC;EACPkC,QAAQ,EAAE,uBAAuB;EACjCC,8BAAiD;EAEjDC,OAAO,EAAC,CAACjC,eAAe,EAAEC,mBAAmB,CAAC;;CAEjD,CAAC,GAEWC,0BAA0B,CA4DtC;SA5DYA,0BAA0B","names":["Component","Subject","of","InputTextModule","InputTextareaModule","NoticesManagementComponent","constructor","noticeId","noticeState","noticeDateTime","Date","noticeTitle","noticeObject","noticeDesc","userId","usersId","Object","keys","notification","addNotice","notice","selectedUsers","length","selectedUsersIds","map","user","usersIdAsString","join","console","log","deleteNotice","selectedNoticeData","_selectedNoticeData","value","selector","template","imports"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Observable, Subject, Subscription, isEmpty, of } from \"rxjs\";\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea'\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport {FormControl, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { DynamicQueryPart } from \"src/app/redux/state\";\r\nimport { Action } from \"@ngrx/store\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],\r\n    imports:[InputTextModule, InputTextareaModule],\r\n    \r\n})\r\n\r\nexport class NoticesManagementComponent  { \r\n\r\n    notification: Partial<NoticeData> = {\r\n        noticeId: 0,\r\n        noticeState: false,\r\n        noticeDateTime: new Date(),\r\n        noticeTitle: '',\r\n        noticeObject: '',\r\n        noticeDesc: '',\r\n        userId: null,\r\n      };\r\n\r\n    usersId: any[] = [  \r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n        { usersId: \"Utente 4\" },\r\n        { usersId: \"Utente 5\" },\r\n        { usersId: \"Utente 6\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n\r\n    addNotice(notice:NoticeData){\r\n\r\n        if (this.selectedUsers.length > 0){\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(', ');\r\n            this.notification.userId = usersIdAsString;\r\n\r\n        }\r\n\r\n        console.log(\"Notifica aggiunta:\", this.notification);\r\n    }\r\n\r\n    deleteNotice(notice:NoticeData){\r\n        // onCascade a tutti quelli a cui è stata inviata\r\n    }\r\n\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n\r\n    globalFiltersFields = Object.keys(this.notification);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n      \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}