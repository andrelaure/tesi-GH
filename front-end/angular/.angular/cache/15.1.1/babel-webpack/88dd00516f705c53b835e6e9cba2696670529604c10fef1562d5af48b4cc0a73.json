{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./officesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./officesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectOfficesData } from \"src/app/redux/offices/offices.selectors\";\nlet OfficesManagementComponent = class OfficesManagementComponent {\n  //successAdd: boolean = false;\n  //successUpdate: boolean = false;\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.officeData$ = of([]);\n    this.editedNotice = {};\n    this.office = {\n      officesName: '',\n      officesCapacity: 1\n    };\n    this.officesType = [{\n      officesType: \"Ufficio standard\"\n    }, {\n      officesType: \"Sala riunioni\"\n    }, {\n      officesType: \"Sala ristoro\"\n    }, {\n      officesType: \"Ufficio amministrativo\"\n    }, {\n      officesType: \"Ufficio dirigenti\"\n    }];\n    this.selectedOffice = [];\n    this.showAddForm = true;\n    this.officeData$ = store.select(selectOfficesData);\n  }\n  //add officeData\n  addNoticeData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.notification.userId = usersIdAsString;\n    }\n    this.store.dispatch(sendNoticeData({\n      item: this.notification,\n      _id: getRandomId()\n    }));\n    this.resetFormFields(form);\n    this.successAdd = true;\n    this.successUpdate = false;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"\",\n      noticeObject: \"\",\n      noticeDesc: \"\",\n      userId: null\n    };\n    this.selectedUsers = [];\n  }\n  //delete officeData\n  //update officeData\n  ngOnInit() {}\n  ngOnDestroy() {}\n};\nOfficesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nOfficesManagementComponent = __decorate([Component({\n  selector: \"app-officesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OfficesManagementComponent);\nexport { OfficesManagementComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAA2B,eAAe;AAI5D,SAAiBC,KAAK,QAAQ,aAAa;AAK3C,SAASC,EAAE,QAAQ,6BAA6B;AAChD,SAASC,cAAc,EAAEC,MAAM,QAAQ,iBAAiB;AAExD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,iBAAiB,QAAQ,yCAAyC;AAQpE,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAsBnC;EACA;EAEAC,YACYC,KAAsB,EACtBC,MAAc,EACdC,KAAqB;IAFrB,UAAK,GAALF,KAAK;IACL,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IA1BjB,gBAAW,GAA8BT,EAAE,CAAC,EAAE,CAAC;IAExC,iBAAY,GAAyB,EAAE;IAE9C,WAAM,GAAyB;MAC3BU,WAAW,EAAG,EAAE;MAChBC,eAAe,EAAG;KACrB;IAED,gBAAW,GAAU,CACjB;MAAEC,WAAW,EAAE;IAAkB,CAAE,EACnC;MAAEA,WAAW,EAAE;IAAe,CAAE,EAChC;MAAEA,WAAW,EAAE;IAAc,CAAE,EAC/B;MAAEA,WAAW,EAAE;IAAwB,CAAE,EACzC;MAAEA,WAAW,EAAE;IAAmB,CAAE,CACvC;IAED,mBAAc,GAAU,EAAE;IAE1B,gBAAW,GAAG,IAAI;IASd,IAAI,CAACC,WAAW,GAAGN,KAAK,CAACO,MAAM,CAACV,iBAAiB,CAAC;EACtD;EAEA;EACAW,aAAa,CAACC,IAAY;IACtB,IAAI,IAAI,CAACC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMC,gBAAgB,GAAa,IAAI,CAACF,aAAa,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC;MACjF,MAAMC,eAAe,GAAWJ,gBAAgB,CAACK,IAAI,CAAC,IAAI,CAAC;MAC3D,IAAI,CAACC,YAAY,CAACC,MAAM,GAAGH,eAAe;;IAE9C,IAAI,CAAChB,KAAK,CAACoB,QAAQ,CAAEC,cAAc,CAAC;MAAEC,IAAI,EAAE,IAAI,CAACJ,YAAY;MAAEK,GAAG,EAAE3B,WAAW;IAAE,CAAE,CAAC,CAAE;IAEtF,IAAI,CAAC4B,eAAe,CAACf,IAAI,CAAC;IAC1B,IAAI,CAACgB,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,aAAa,GAAG,KAAK;EAC9B;EAEAF,eAAe,CAACf,IAAY;IACxBA,IAAI,CAACkB,SAAS,EAAE;IAChB,IAAI,CAACT,YAAY,GAAG;MAChBU,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE,UAAU;MAC1BC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,EAAE;MACdb,MAAM,EAAE;KACX;IACD,IAAI,CAACT,aAAa,GAAG,EAAE;EAC3B;EAEA;EAEA;EAGAuB,QAAQ,IAER;EAEAC,WAAW,IAEX;;;;;;;;;AAvESpC,0BAA0B,eANtCP,SAAS,CAAC;EACP4C,QAAQ,EAAE,uBAAuB;EACjCC,8BAAiD;;CAEpD,CAAC,GAEWtC,0BAA0B,CAwEtC;SAxEYA,0BAA0B","names":["Component","Store","of","ActivatedRoute","Router","getRandomId","selectOfficesData","OfficesManagementComponent","constructor","store","router","route","officesName","officesCapacity","officesType","officeData$","select","addNoticeData","form","selectedUsers","length","selectedUsersIds","map","user","usersId","usersIdAsString","join","notification","userId","dispatch","sendNoticeData","item","_id","resetFormFields","successAdd","successUpdate","resetForm","noticeState","noticeDateTime","noticeTitle","noticeObject","noticeDesc","ngOnInit","ngOnDestroy","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\officesManagement\\officesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AppState} from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport {OfficesData} from \"src/app/redux/offices/offices.state\";\r\n\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable} from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectOfficesData } from \"src/app/redux/offices/offices.selectors\";\r\n\r\n@Component({\r\n    selector: \"app-officesManagement\",\r\n    templateUrl: \"./officesManagement.component.html\",\r\n    styleUrls: [\"./officesManagement.component.scss\"],\r\n})\r\n\r\nexport class OfficesManagementComponent  implements OnInit, OnDestroy{ \r\n\r\n    officeData$: Observable<OfficesData[]> = of([]);\r\n\r\n    public editedNotice: Partial<OfficesData> = {};\r\n\r\n    office: Partial<OfficesData> = {\r\n        officesName : '',\r\n        officesCapacity : 1,\r\n    };\r\n\r\n    officesType: any[] = [  //to fill with keyclock users\r\n        { officesType: \"Ufficio standard\" },\r\n        { officesType: \"Sala riunioni\" },\r\n        { officesType: \"Sala ristoro\" },\r\n        { officesType: \"Ufficio amministrativo\" },\r\n        { officesType: \"Ufficio dirigenti\" },\r\n    ];\r\n\r\n    selectedOffice: any[] = [];\r\n\r\n    showAddForm = true;\r\n    //successAdd: boolean = false;\r\n    //successUpdate: boolean = false;\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.officeData$ = store.select(selectOfficesData);\r\n    }\r\n\r\n    //add officeData\r\n    addNoticeData(form: NgForm) {\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.notification.userId = usersIdAsString;\r\n        }\r\n        this.store.dispatch( sendNoticeData({ item: this.notification, _id: getRandomId() }) );\r\n    \r\n        this.resetFormFields(form);\r\n        this.successAdd = true;\r\n        this.successUpdate = false;\r\n    }\r\n\r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.notification = {\r\n            noticeState: false,\r\n            noticeDateTime: \"01012023\",\r\n            noticeTitle: \"\",\r\n            noticeObject: \"\",\r\n            noticeDesc: \"\",\r\n            userId: null,\r\n        };\r\n        this.selectedUsers = [];\r\n    }\r\n \r\n    //delete officeData\r\n\r\n    //update officeData\r\n\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}