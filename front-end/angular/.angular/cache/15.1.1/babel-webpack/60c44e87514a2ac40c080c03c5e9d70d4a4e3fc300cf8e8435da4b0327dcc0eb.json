{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./notice.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./notice.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { firstValueFrom, of, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged, filter, map, startWith, take } from \"rxjs/operators\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\nimport { changeNoticeDataFilters } from \"src/app/redux/notice/notice.actions\";\nimport { environment } from \"src/environments/environment\";\nlet NoticeComponent = class NoticeComponent {\n  formatDateToDDMMYYYY(date) {\n    date.setDate(date.getDate() + 1); //tomorrow\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const year = date.getFullYear().toString();\n    return `${day}/${month}/${year}`;\n  }\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.lastSearch$ = of(null);\n    this.noticeData$ = of([]);\n    this.noticeDataFilters$ = of({});\n    this.personalTotalRecords$ = of(0);\n    this.generalTotalRecords$ = of(0);\n    this.personalNotices$ = of([]);\n    this.generalNotices$ = of([]);\n    this.expandedMap = {};\n    this.currentDate = new Date();\n    this.formattedDate = this.formatDateToDDMMYYYY(this.currentDate);\n    this._defaultND = {\n      noticeId: 0,\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"dummy\",\n      noticeObject: \"dummy\",\n      noticeDesc: \"dummy\"\n    };\n    this.globalFiltersFields = Object.keys(this._defaultND);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n    this.noticeData$.subscribe(data => {\n      data.forEach(notice => {\n        this.expandedMap[notice.noticeId] = false;\n      });\n    });\n  }\n  /*async filter(value: string) {\r\n      const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n      const newQueryParams: DynamicQueryPart = {\r\n          ...currentQueryParams,\r\n          paging: currentQueryParams.paging\r\n              ? currentQueryParams.paging\r\n              : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n          filtering: value\r\n              ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n              : []\r\n      };\r\n      this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n  }*/\n  filter(tableId, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.currentTableId = tableId;\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          tableId: this.currentTableId,\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n      this.lastSearch$ = this.store.select(selectNoticeDataFilters).pipe(take(1), map(f => {\n        const tableFilter = f.filtering.find(filter => filter.tableId === this.currentTableId);\n        return tableFilter && tableFilter.value ? tableFilter.value : \"\";\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  toggleRow(noticeId) {\n    this.expandedMap[noticeId] = !this.expandedMap[noticeId];\n  }\n  isRowExpanded(noticeId) {\n    return this.expandedMap[noticeId];\n  }\n  ngOnInit() {\n    this.noticeData$ = this.store.select(selectNoticeData).pipe(startWith(this.route.snapshot.data.NoticeData));\n    this.noticeData$.pipe(filter(data => !!data)).subscribe(data => {\n      this.personalNotices$ = of(data.filter(data => data.userId !== null));\n      this.generalNotices$ = of(data.filter(data => data.userId === null));\n      this.personalTotalRecords$ = this.personalNotices$.pipe(map(x => x ? x.length : 0));\n      this.generalTotalRecords$ = this.generalNotices$.pipe(map(x => x ? x.length : 0));\n      //console.log(\"Personal Notices:\", this.personalNotices$);\n      //console.log(\"General Notices:\", this.generalNotices$);\n    });\n\n    this.lastSearch$ = this.store.select(selectNoticeDataFilters).pipe(take(1), map(f => {\n      const tableFilter = f.filtering.find(filter => filter.tableId === this.currentTableId);\n      return tableFilter && tableFilter.value ? tableFilter.value : '';\n    }));\n  }\n  ngOnDestroy() {\n    var _a;\n    (_a = this.filtersSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nNoticeComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nNoticeComponent = __decorate([Component({\n  selector: \"app-notice\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticeComponent);\nexport { NoticeComponent };","map":{"version":3,"mappings":"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","names":["Component","ActivatedRoute","Router","Store","firstValueFrom","of","Subject","debounceTime","distinctUntilChanged","filter","map","startWith","take","getRandomId","selectIsLoading","selectNoticeData","selectNoticeDataFilters","changeNoticeDataFilters","environment","NoticeComponent","formatDateToDDMMYYYY","date","setDate","getDate","day","toString","padStart","month","getMonth","year","getFullYear","selectedNoticeData","_selectedNoticeData","value","constructor","store","router","route","Date","currentDate","noticeId","noticeState","noticeDateTime","noticeTitle","noticeObject","noticeDesc","Object","keys","_defaultND","isLoading$","select","pipe","noticeDataFilters$","filtersSub","filtersSubj$","asObservable","subscribe","a","dispatch","lastSearch$","f","filtering","length","noticeData$","data","forEach","notice","expandedMap","tableId","currentTableId","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","join","predicate","kind","next","queryParams","_id","tableFilter","find","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","toggleRow","isRowExpanded","ngOnInit","snapshot","NoticeData","personalNotices$","userId","generalNotices$","personalTotalRecords$","x","generalTotalRecords$","ngOnDestroy","unsubscribe","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\notice\\notice.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { firstValueFrom, Observable, of, Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, filter, map, startWith, take } from \"rxjs/operators\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\n\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { changeNoticeDataFilters } from \"src/app/redux/notice/notice.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-notice\",\r\n    templateUrl: \"./notice.component.html\",\r\n    styleUrls: [\"./notice.component.scss\"],\r\n})\r\n\r\nexport class NoticeComponent implements OnInit, OnDestroy{\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n\r\n    personalTotalRecords$: Observable<number> = of(0);\r\n    generalTotalRecords$: Observable<number> = of(0);\r\n    personalNotices$: Observable<NoticeData[]> = of([]);\r\n    generalNotices$: Observable<NoticeData[]> = of([]);\r\n    \r\n    expandedMap: { [key: number]: boolean } = {};\r\n\r\n    currentTableId: string;\r\n\r\n    currentDate = new Date();\r\n    formattedDate = this.formatDateToDDMMYYYY(this.currentDate);\r\n\r\n    private formatDateToDDMMYYYY(date: Date): string {\r\n        date.setDate(date.getDate()+1);  //tomorrow\r\n        const day = date.getDate().toString().padStart(2, '0'); \r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        const year = date.getFullYear().toString();\r\n      \r\n        return `${day}/${month}/${year}`;\r\n      }\r\n\r\n    private _defaultND: Partial<NoticeData> = {\r\n        noticeId: 0,\r\n        noticeState: false,\r\n        noticeDateTime: \"01012023\",\r\n        noticeTitle: \"dummy\",\r\n        noticeObject: \"dummy\",\r\n        noticeDesc: \"dummy\",\r\n    };\r\n    \r\n    globalFiltersFields = Object.keys(this._defaultND);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        this.noticeData$.subscribe((data) => { data.forEach((notice) => {this.expandedMap[notice.noticeId] = false })});\r\n    }\r\n\r\n    /*async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }*/\r\n    async filter(tableId:string, value: string) {\r\n        this.currentTableId = tableId;\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n            ? currentQueryParams.paging\r\n            : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n            ? [{ tableId: this.currentTableId, column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n            : []\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n        this.lastSearch$ = this.store\r\n        .select(selectNoticeDataFilters)\r\n        .pipe(\r\n            take(1),\r\n            map((f) => {\r\n            const tableFilter = f.filtering.find((filter) => filter.tableId === this.currentTableId);\r\n            return tableFilter && tableFilter.value ? tableFilter.value : \"\";\r\n            })\r\n        );\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField\r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0 }]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    toggleRow(noticeId: number) {\r\n        this.expandedMap[noticeId] = !this.expandedMap[noticeId];\r\n    }\r\n\r\n    isRowExpanded(noticeId: number): boolean {\r\n        return this.expandedMap[noticeId];\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.noticeData$ = this.store.select(selectNoticeData).pipe(startWith(this.route.snapshot.data.NoticeData));\r\n        this.noticeData$.pipe(\r\n            filter(data => !!data)\r\n        ).subscribe((data) => {\r\n            this.personalNotices$ = of(data.filter((data) => data.userId !== null));\r\n            this.generalNotices$ = of(data.filter((data) => data.userId === null));            \r\n\r\n            this.personalTotalRecords$ = this.personalNotices$.pipe(map((x) => (x ? x.length : 0)));\r\n            this.generalTotalRecords$ = this.generalNotices$.pipe(map((x) => (x ? x.length : 0)));\r\n\r\n            //console.log(\"Personal Notices:\", this.personalNotices$);\r\n            //console.log(\"General Notices:\", this.generalNotices$);\r\n        });\r\n\r\n        this.lastSearch$ = this.store.select(selectNoticeDataFilters).pipe(\r\n            take(1),\r\n            map((f) => {\r\n              const tableFilter = f.filtering.find(filter => filter.tableId === this.currentTableId);\r\n              return tableFilter && tableFilter.value ? tableFilter.value : '';\r\n            })\r\n          );\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.filtersSub?.unsubscribe();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}