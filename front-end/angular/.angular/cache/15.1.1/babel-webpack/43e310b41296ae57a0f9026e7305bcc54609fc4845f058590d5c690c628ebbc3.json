{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\nimport { changeNoticeDataFilters, sendNoticeData } from \"src/app/redux/notice/notice.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Subject, debounceTime, distinctUntilChanged, firstValueFrom, map, startWith, take } from \"rxjs\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.noticeData$ = of([]);\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: '01012023',\n      noticeTitle: '',\n      noticeObject: '',\n      noticeDesc: '',\n      userId: null\n    };\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }, {\n      usersId: \"Utente 4\"\n    }, {\n      usersId: \"Utente 5\"\n    }, {\n      usersId: \"Utente 6\"\n    }];\n    this.selectedUsers = [];\n    this.succuessSubmit = false;\n    //notices table\n    this.lastSearch$ = of(null);\n    this.noticeDataFilters$ = of({});\n    this.personalTotalRecords$ = of(0);\n    this.generalTotalRecords$ = of(0);\n    this.personalNotices$ = of([]);\n    this.generalNotices$ = of([]);\n    this.expandedMap = {};\n    this._defaultND = {\n      noticeId: 0,\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"dummy\",\n      noticeObject: \"dummy\",\n      noticeDesc: \"dummy\"\n    };\n    this.globalFiltersFields = Object.keys(this._defaultND);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.noticeData$ = store.select(selectNoticeData);\n    //notices table\n    this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n    this.noticeData$.subscribe(data => {\n      data.forEach(notice => {\n        this.expandedMap[notice.noticeId] = false;\n      });\n    });\n  }\n  //addNotice Form\n  addNoticeData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.notification.userId = usersIdAsString;\n    }\n    //add to db\n    this.store.dispatch(sendNoticeData({\n      item: this.notification,\n      _id: getRandomId()\n    }));\n    //console.log(\"Notifica aggiunta:\", this.notification);\n    this.resetFormFields(form);\n    this.succuessSubmit = true;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"\",\n      noticeObject: \"\",\n      noticeDesc: \"\",\n      userId: null\n    };\n    this.selectedUsers = [];\n  }\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  deleteNoticeData(notice) {\n    //delete from db\n  }\n};\nNoticesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","selectNoticeData","selectNoticeDataFilters","changeNoticeDataFilters","sendNoticeData","environment","of","ActivatedRoute","Router","Subject","debounceTime","distinctUntilChanged","firstValueFrom","map","startWith","take","getRandomId","selectIsLoading","NoticesManagementComponent","constructor","store","router","route","noticeState","noticeDateTime","noticeTitle","noticeObject","noticeDesc","userId","usersId","noticeId","Object","keys","_defaultND","noticeData$","select","pipe","snapshot","data","NoticeData","isLoading$","noticeDataFilters$","filtersSub","filtersSubj$","asObservable","subscribe","a","dispatch","lastSearch$","f","filtering","length","value","forEach","notice","expandedMap","addNoticeData","form","selectedUsers","selectedUsersIds","user","usersIdAsString","join","notification","item","_id","resetFormFields","succuessSubmit","resetForm","selectedNoticeData","_selectedNoticeData","filter","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","predicate","kind","next","queryParams","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","deleteNoticeData","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { changeNoticeDataFilters, sendNoticeData } from \"src/app/redux/notice/notice.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, firstValueFrom, map, startWith, take } from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { LazyLoadEvent } from \"primeng/api/lazyloadevent\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],\r\n    //imports:[InputTextModule, InputTextareaModule],\r\n    \r\n})\r\n\r\nexport class NoticesManagementComponent  { \r\n\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n\r\n    notification: Partial<NoticeData> = {\r\n        noticeState: false,\r\n        noticeDateTime: '01012023',\r\n        noticeTitle: '',\r\n        noticeObject: '',\r\n        noticeDesc: '',\r\n        userId: null,\r\n      };\r\n\r\n    usersId: any[] = [  //to fill with keyclock users\r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n        { usersId: \"Utente 4\" },\r\n        { usersId: \"Utente 5\" },\r\n        { usersId: \"Utente 6\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n    succuessSubmit: boolean = false;\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.noticeData$ = store.select(selectNoticeData);\r\n\r\n        //notices table\r\n        this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        this.noticeData$.subscribe((data) => { data.forEach((notice) => {this.expandedMap[notice.noticeId] = false })});\r\n    }\r\n\r\n    //addNotice Form\r\n\r\n    addNoticeData(form: NgForm) {\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.notification.userId = usersIdAsString;\r\n        }\r\n        //add to db\r\n        this.store.dispatch( sendNoticeData({ item: this.notification, _id: getRandomId() }) );\r\n        //console.log(\"Notifica aggiunta:\", this.notification);\r\n    \r\n        this.resetFormFields(form);\r\n        this.succuessSubmit = true;\r\n    }\r\n    \r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.notification = {\r\n            noticeState: false,\r\n            noticeDateTime: \"01012023\",\r\n            noticeTitle: \"\",\r\n            noticeObject: \"\",\r\n            noticeDesc: \"\",\r\n            userId: null,\r\n        };\r\n        this.selectedUsers = [];\r\n    }\r\n\r\n    //notices table\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n\r\n    personalTotalRecords$: Observable<number> = of(0);\r\n    generalTotalRecords$: Observable<number> = of(0);\r\n    personalNotices$: Observable<NoticeData[]> = of([]);\r\n    generalNotices$: Observable<NoticeData[]> = of([]);\r\n    \r\n    expandedMap: { [key: number]: boolean } = {};\r\n\r\n    private _defaultND: Partial<NoticeData> = {\r\n        noticeId: 0,\r\n        noticeState: false,\r\n        noticeDateTime: \"01012023\",\r\n        noticeTitle: \"dummy\",\r\n        noticeObject: \"dummy\",\r\n        noticeDesc: \"dummy\",\r\n    };\r\n    \r\n    globalFiltersFields = Object.keys(this._defaultND);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n\r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField\r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0 }]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n    \r\n    deleteNoticeData(notice:NoticeData){\r\n        //delete from db\r\n    }\r\n      \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}