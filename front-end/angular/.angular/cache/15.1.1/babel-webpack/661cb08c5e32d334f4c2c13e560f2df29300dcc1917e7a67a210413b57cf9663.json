{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\nimport { environment } from '../../../environments/environment'; //  src/environments/environment';\nimport { addOfficesData, addOfficesDataError, addOfficesDataSuccess, changeOfficesDataFilters, searchOfficesData, searchOfficesDataError, searchOfficesDataSuccess } from './offices.actions';\nlet OfficesEffect = class OfficesEffect {\n  constructor(actions$, httpClient) {\n    this.actions$ = actions$;\n    this.httpClient = httpClient;\n    //search OfficesData\n    this._serachOfficesData = createEffect(() => this.actions$.pipe(ofType(searchOfficesData), mergeMap(a => {\n      const response$ = this.httpClient.post(`${environment.apiUrl}/offices/searchOfficesData`, a.queryParams, {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => r !== null && r !== void 0 ? r : []), map(r => searchOfficesDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [searchOfficesDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n    this._changeOfficesDataFilters = createEffect(() => this.actions$.pipe(ofType(changeOfficesDataFilters), map(a => searchOfficesData({\n      queryParams: a.queryParams,\n      _id: a._id\n    }))));\n    //add OfficesData \n    this._addOfficesData = createEffect(() => this.actions$.pipe(ofType(addOfficesData), mergeMap(a => {\n      const response$ = this.httpClient.post(`${environment.apiUrl}/offices/addOfficesData`, [a.item], {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => r !== null && r !== void 0 ? r : []), map(r => addOfficesDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [addOfficesDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n  }\n};\nOfficesEffect.ctorParameters = () => [{\n  type: Actions\n}, {\n  type: CustomHttpClient\n}];\nOfficesEffect = __decorate([Injectable()], OfficesEffect);\nexport { OfficesEffect };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,MAAM,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAC7D,SAASC,GAAG,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAC1D,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,SAASC,WAAW,QAAQ,mCAAmC,CAAC,CAAE;AAClE,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,qBAAqB,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAEC,sBAAsB,EAAEC,wBAAwB,QAAQ,mBAAmB;AAMtL,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAEtBC,YACYC,QAAiB,EACjBC,UAA4B;IAD5B,aAAQ,GAARD,QAAQ;IACR,eAAU,GAAVC,UAAU;IAItB;IACA,uBAAkB,GAAGjB,YAAY,CAC7B,MAAM,IAAI,CAACgB,QAAQ,CAACE,IAAI,CACpBnB,MAAM,CAACY,iBAAiB,CAAC,EACzBR,QAAQ,CAACgB,CAAC,IAAG;MACT,MAAMC,SAAS,GAAG,IAAI,CAACH,UAAU,CAACI,IAAI,CAAgB,GAAGf,WAAW,CAACgB,MAAM,4BAA4B,EAAEH,CAAC,CAACI,WAAW,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAC,CAAC;MAChJ,OAAOJ,SAAS,CAACF,IAAI,CACjBhB,GAAG,CAACuB,CAAC,IAAIA,CAAC,aAADA,CAAC,cAADA,CAAC,GAAI,EAAE,CAAC,EACjBvB,GAAG,CAACuB,CAAC,IAAIZ,wBAAwB,CAAC;QAACa,MAAM,EAAED,CAAC;QAAEE,GAAG,EAAER,CAAC,CAACQ;MAAG,CAAE,CAAC,CAAC,EAC5DvB,UAAU,CAAC,CAACwB,GAAsB,EAAEC,CAAC,KAAI;QACrC,OAAO,CAACjB,sBAAsB,CAAC;UAACkB,KAAK,EAAEF,GAAG,CAACG,OAAO;UAAEJ,GAAG,EAAER,CAAC,CAACQ;QAAG,CAAC,CAAC,CAAC;MACrE,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CACV;IAED,8BAAyB,GAAG3B,YAAY,CACpC,MAAM,IAAI,CAACgB,QAAQ,CAACE,IAAI,CACpBnB,MAAM,CAACW,wBAAwB,CAAC,EAChCR,GAAG,CAACiB,CAAC,IAAIR,iBAAiB,CAAC;MAACY,WAAW,EAAEJ,CAAC,CAACI,WAAW;MAAEI,GAAG,EAAER,CAAC,CAACQ;IAAG,CAAC,CAAC,CAAC,CACpE,CACR;IAED;IACA,oBAAe,GAAG3B,YAAY,CAC1B,MAAM,IAAI,CAACgB,QAAQ,CAACE,IAAI,CACpBnB,MAAM,CAACQ,cAAc,CAAC,EACtBJ,QAAQ,CAACgB,CAAC,IAAG;MACT,MAAMC,SAAS,GAAG,IAAI,CAACH,UAAU,CAACI,IAAI,CAAgB,GAAGf,WAAW,CAACgB,MAAM,yBAAyB,EAAE,CAACH,CAAC,CAACa,IAAI,CAAC,EAAE;QAAER,YAAY,EAAE;MAAM,CAAC,CAAC;MACxI,OAAOJ,SAAS,CAACF,IAAI,CACjBhB,GAAG,CAACuB,CAAC,IAAIA,CAAC,aAADA,CAAC,cAADA,CAAC,GAAI,EAAE,CAAC,EACjBvB,GAAG,CAACuB,CAAC,IAAIhB,qBAAqB,CAAC;QAACiB,MAAM,EAAED,CAAC;QAAEE,GAAG,EAAER,CAAC,CAACQ;MAAG,CAAE,CAAC,CAAC,EACzDvB,UAAU,CAAC,CAACwB,GAAsB,EAAEC,CAAC,KAAI;QACrC,OAAO,CAACrB,mBAAmB,CAAC;UAACsB,KAAK,EAAEF,GAAG,CAACG,OAAO;UAAEJ,GAAG,EAAER,CAAC,CAACQ;QAAG,CAAC,CAAC,CAAC;MAClE,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CACV;EAtCE;;;;;;;AALMb,aAAa,eADzBhB,UAAU,EAAE,GACAgB,aAAa,CA6CzB;SA7CYA,aAAa","names":["Injectable","ofType","createEffect","Actions","map","mergeMap","catchError","CustomHttpClient","environment","addOfficesData","addOfficesDataError","addOfficesDataSuccess","changeOfficesDataFilters","searchOfficesData","searchOfficesDataError","searchOfficesDataSuccess","OfficesEffect","constructor","actions$","httpClient","pipe","a","response$","post","apiUrl","queryParams","responseType","r","result","_id","err","_","error","message","item"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\redux\\offices\\offices.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\r\nimport { map, mergeMap, catchError } from 'rxjs/operators';\r\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\r\nimport { environment } from '../../../environments/environment';  //  src/environments/environment';\r\nimport { addOfficesData, addOfficesDataError, addOfficesDataSuccess, changeOfficesDataFilters, searchOfficesData, searchOfficesDataError, searchOfficesDataSuccess,} from './offices.actions';\r\nimport { OfficesData } from './offices.state';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\n@Injectable()\r\nexport class OfficesEffect{\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private httpClient: CustomHttpClient\r\n    ){ }\r\n\r\n\r\n    //search OfficesData\r\n    _serachOfficesData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(searchOfficesData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.post<OfficesData[]>(`${environment.apiUrl}/offices/searchOfficesData`, a.queryParams, { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => r ?? []),\r\n                    map(r => searchOfficesDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [searchOfficesDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n\r\n    _changeOfficesDataFilters = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(changeOfficesDataFilters),\r\n            map(a => searchOfficesData({queryParams: a.queryParams, _id: a._id}))\r\n            )\r\n    );\r\n\r\n    //add OfficesData \r\n    _addOfficesData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(addOfficesData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.post<OfficesData[]>(`${environment.apiUrl}/offices/addOfficesData`, [a.item], { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => r ?? []),\r\n                    map(r => addOfficesDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [addOfficesDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}