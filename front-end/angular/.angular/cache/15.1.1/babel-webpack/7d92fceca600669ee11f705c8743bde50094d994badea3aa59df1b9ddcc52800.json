{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\nimport { environment } from '../../../environments/environment'; //  src/environments/environment';\nimport { changeNoticeDataFilters, searchNoticeData, searchNoticeDataError, searchNoticeDataSuccess } from './notice.actions';\nimport { sendNoticeData, sendNoticeDataSuccess, sendNoticeDataError, deleteNoticeData, deleteNoticeDataSuccess, deleteNoticeDataError } from \"./notice.actions\";\nlet NoticeEffect = class NoticeEffect {\n  constructor(actions$, httpClient) {\n    this.actions$ = actions$;\n    this.httpClient = httpClient;\n    //search NoticeData\n    this._serachNoticeData = createEffect(() => this.actions$.pipe(ofType(searchNoticeData), mergeMap(a => {\n      const response$ = this.httpClient.post(`${environment.apiUrl}/notice/searchNoticeData`, a.queryParams, {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => r !== null && r !== void 0 ? r : []), map(r => searchNoticeDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [searchNoticeDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n    this._changeNoticeDataFilters = createEffect(() => this.actions$.pipe(ofType(changeNoticeDataFilters), map(a => searchNoticeData({\n      queryParams: a.queryParams,\n      _id: a._id\n    }))));\n    //add NoticeData\n    this._sendNoticeData = createEffect(() => this.actions$.pipe(ofType(sendNoticeData), mergeMap(a => {\n      const response$ = this.httpClient.post('${environment.apiUrl}/notice/sendNoticeData', [a.item], {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => r !== null && r !== void 0 ? r : []), map(r => sendNoticeDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [sendNoticeDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n    this._deleteNoticeData = createEffect(() => this.actions$.pipe(ofType(deleteNoticeData), mergeMap(a => {\n      const response$ = this.httpClient.delete('${environment.apiUrl}/notice/deleteNoticeData', {\n        responseType: 'json'\n      });\n      return response$.pipe(map(r => r !== null && r !== void 0 ? r : []), map(r => deleteNoticeDataSuccess({\n        result: r,\n        _id: a._id\n      })), catchError((err, _) => {\n        return [deleteNoticeDataError({\n          error: err.message,\n          _id: a._id\n        })];\n      }));\n    })));\n  }\n};\nNoticeEffect.ctorParameters = () => [{\n  type: Actions\n}, {\n  type: CustomHttpClient\n}];\nNoticeEffect = __decorate([Injectable()], NoticeEffect);\nexport { NoticeEffect };","map":{"version":3,"mappings":"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","names":["Injectable","ofType","createEffect","Actions","map","mergeMap","catchError","CustomHttpClient","environment","changeNoticeDataFilters","searchNoticeData","searchNoticeDataError","searchNoticeDataSuccess","sendNoticeData","sendNoticeDataSuccess","sendNoticeDataError","deleteNoticeData","deleteNoticeDataSuccess","deleteNoticeDataError","NoticeEffect","constructor","actions$","httpClient","pipe","a","response$","post","apiUrl","queryParams","responseType","r","result","_id","err","_","error","message","item","delete"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\redux\\notice\\notice.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ofType, createEffect, Actions } from '@ngrx/effects';\r\nimport { map, mergeMap, catchError } from 'rxjs/operators';\r\nimport { CustomHttpClient } from '../../services/custom-http-client.service';\r\nimport { environment } from '../../../environments/environment';  //  src/environments/environment';\r\nimport { changeNoticeDataFilters, searchNoticeData, searchNoticeDataError, searchNoticeDataSuccess} from './notice.actions';\r\nimport { sendNoticeData, sendNoticeDataSuccess, sendNoticeDataError, deleteNoticeData, deleteNoticeDataSuccess, deleteNoticeDataError} from \"./notice.actions\";\r\nimport { NoticeData } from './notice.state';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\n@Injectable()\r\nexport class NoticeEffect{\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private httpClient: CustomHttpClient\r\n    ){ }\r\n\r\n\r\n    //search NoticeData\r\n    _serachNoticeData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(searchNoticeData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.post<NoticeData[]>(`${environment.apiUrl}/notice/searchNoticeData`, a.queryParams, { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => r ?? []),\r\n                    map(r => searchNoticeDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [searchNoticeDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n\r\n    _changeNoticeDataFilters = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(changeNoticeDataFilters),\r\n            map(a => searchNoticeData({queryParams: a.queryParams, _id: a._id}))\r\n            )\r\n    );\r\n\r\n\r\n\r\n    //add NoticeData\r\n    \r\n    _sendNoticeData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(sendNoticeData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.post<NoticeData[]>('${environment.apiUrl}/notice/sendNoticeData', [a.item], { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => r ?? []),\r\n                    map(r => sendNoticeDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [sendNoticeDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n\r\n    _deleteNoticeData = createEffect(\r\n        () => this.actions$.pipe(\r\n            ofType(deleteNoticeData),\r\n            mergeMap(a => {\r\n                const response$ = this.httpClient.delete<NoticeData[]>('${environment.apiUrl}/notice/deleteNoticeData' , { responseType: 'json'});\r\n                return response$.pipe(\r\n                    map(r => r ?? []),\r\n                    map(r => deleteNoticeDataSuccess({result: r, _id: a._id })),\r\n                    catchError((err: HttpErrorResponse, _) => {\r\n                        return [deleteNoticeDataError({error: err.message, _id: a._id})];\r\n                    }));\r\n            }))\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}