{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./viewsManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./viewsManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { Subject, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, of, startWith, take } from \"rxjs\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nimport { selectOfficesData, selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\nimport { environment } from \"src/environments/environment\";\nimport { changeOfficesDataFilters, getOfficesData } from \"src/app/redux/offices/offices.actions\";\nimport { getRandomId } from \"src/app/redux/actions\";\nlet ViewsManagementComponent = class ViewsManagementComponent {\n  get selectedOfficesData() {\n    return this._selectedOfficesData;\n  }\n  set selectedOfficesData(value) {\n    this._selectedOfficesData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.officesData$ = of([]);\n    this.office = {};\n    this.expandedMap = {};\n    this.lastSearch$ = of(null);\n    this.officesDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.office);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.officesData$.subscribe(data => {\n      if (data) {\n        data.forEach(office => {\n          this.expandedMap[office.officesId] = false;\n        });\n      }\n    });\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.officesDataFilters$ = store.select(selectOfficesDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  getOffices() {\n    this.store.dispatch(getOfficesData({\n      item: this.office,\n      _id: getRandomId()\n    }));\n  }\n  //filtering and pagination\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.officesDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeOfficesDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.officesDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeOfficesDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  ngOnInit() {\n    //this.getOffices();\n    this.officesData$ = this.store.select(selectOfficesData).pipe(startWith(this.route.snapshot.data.OfficesData));\n    this.officesData$.pipe(filter(data => !!data)).subscribe(data => {\n      this.totalRecords$ = this.officesData$.pipe(map(x => x ? x[0] ? x[0].count : 0 : 0));\n    });\n  }\n  ngOnDestroy() {}\n};\nViewsManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nViewsManagementComponent = __decorate([Component({\n  selector: \"app-viewsManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ViewsManagementComponent);\nexport { ViewsManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","Subject","debounceTime","distinctUntilChanged","filter","firstValueFrom","map","of","startWith","take","ActivatedRoute","Router","selectIsLoading","selectOfficesData","selectOfficesDataFilters","environment","changeOfficesDataFilters","getOfficesData","getRandomId","ViewsManagementComponent","selectedOfficesData","_selectedOfficesData","value","constructor","store","router","route","Object","keys","office","officesData$","subscribe","data","forEach","expandedMap","officesId","isLoading$","select","pipe","officesDataFilters$","filtersSub","filtersSubj$","asObservable","a","dispatch","lastSearch$","f","filtering","length","getOffices","item","_id","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","join","predicate","kind","next","queryParams","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","ngOnInit","snapshot","OfficesData","totalRecords$","x","count","ngOnDestroy","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\viewsManagement\\viewsManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AppState, DynamicQueryPart, Filtering} from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, of, startWith, take } from \"rxjs\";\r\nimport { OfficesData } from \"src/app/redux/offices/offices.state\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { selectOfficesData, selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { changeOfficesDataFilters, getOfficesData } from \"src/app/redux/offices/offices.actions\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\nimport { OfficesManagementComponent } from \"../officesManagement/officesManagement.component\";\r\n\r\n@Component({\r\n    selector: \"app-viewsManagement\",\r\n    templateUrl: \"./viewsManagement.component.html\",\r\n    styleUrls: [\"./viewsManagement.component.scss\"],\r\n})\r\n\r\nexport class ViewsManagementComponent  implements OnInit, OnDestroy{ \r\n\r\n    officesData$: Observable<OfficesData[]> = of([]);\r\n    public office: Partial<OfficesData> = {};\r\n\r\n    expandedMap: { [key: number]: boolean } = {};\r\n    lastSearch$: Observable<string> = of(null);\r\n    officesDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    globalFiltersFields = Object.keys(this.office);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedOfficesData: OfficesData;\r\n    get selectedOfficesData() {\r\n        return this._selectedOfficesData;\r\n    }\r\n    set selectedOfficesData(value: OfficesData) {\r\n        this._selectedOfficesData = value;\r\n    }\r\n\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.officesData$.subscribe((data) => {\r\n            if(data) { data.forEach((office) => {this.expandedMap[office.officesId] = false; });} });\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.officesDataFilters$ = store.select(selectOfficesDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n    }\r\n\r\n    getOffices(){\r\n\r\n        this.store.dispatch( getOfficesData({ item: this.office, _id: getRandomId() }) );\r\n\r\n    }\r\n\r\n    //filtering and pagination\r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.officesDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeOfficesDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.officesDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField                \r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0}]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeOfficesDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    ngOnInit(){\r\n        //this.getOffices();\r\n        this.officesData$ = this.store.select(selectOfficesData).pipe(startWith(this.route.snapshot.data.OfficesData));\r\n        this.officesData$.pipe(\r\n            filter(data => !!data)\r\n        ).subscribe((data) => {\r\n            this.totalRecords$ = this.officesData$.pipe(map((x) => (x ? (x[0] ? x[0].count : 0) : 0)));\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(){\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}