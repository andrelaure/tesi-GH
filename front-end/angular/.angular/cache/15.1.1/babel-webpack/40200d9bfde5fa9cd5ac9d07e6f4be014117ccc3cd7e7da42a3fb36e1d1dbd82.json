{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./officesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./officesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { selectOfficesData, selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\nimport { environment } from \"src/environments/environment\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Subject, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, startWith, take } from \"rxjs\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { addOfficesData, changeOfficesDataFilters, deleteOfficesData, updateOfficesData } from \"src/app/redux/offices/offices.actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nlet OfficesManagementComponent = class OfficesManagementComponent {\n  get selectedOfficesData() {\n    return this._selectedOfficesData;\n  }\n  set selectedOfficesData(value) {\n    this._selectedOfficesData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.officesData$ = of([]);\n    this.editedOffices = {};\n    this.office = {\n      officesName: '',\n      officesCapacity: null,\n      userId: null\n    };\n    this.officesType = [{\n      officesType: \"Ufficio standard\"\n    }, {\n      officesType: \"Sala riunioni\"\n    }, {\n      officesType: \"Sala ristoro\"\n    }, {\n      officesType: \"Ufficio amministrativo\"\n    }, {\n      officesType: \"Ufficio dirigenti\"\n    }];\n    this.selectedType = null;\n    //used to blocking some offices for only some user\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }];\n    this.selectedUsers = [];\n    this.showAddForm = true;\n    this.successAdd = false;\n    this.successUpdate = false;\n    this.expandedMap = {};\n    this.lastSearch$ = of(null);\n    this.officesDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.office);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    //this.officesData$ = store.select(selectOfficesData);\n    this.officesData$.subscribe(data => {\n      if (data) {\n        data.forEach(office => {\n          this.expandedMap[office.officesId] = false;\n        });\n      }\n    });\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.officesDataFilters$ = store.select(selectOfficesDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  //add officesData\n  addOffice(form) {\n    if (this.selectedType) {\n      this.office.officesType = this.selectedType.officesType;\n    }\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.office.userId = usersIdAsString;\n    }\n    this.store.dispatch(addOfficesData({\n      item: this.office,\n      _id: getRandomId()\n    }));\n    this.resetFormFields(form);\n    this.successAdd = true;\n    this.successUpdate = false;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.office = {\n      officesName: '',\n      officesCapacity: null,\n      userId: null\n    };\n    this.selectedType = [];\n    this.selectedUsers = [];\n  }\n  //delete officesData\n  deleteOfficesData(office) {\n    if (office) {\n      this.store.dispatch(deleteOfficesData({\n        item: office,\n        _id: getRandomId()\n      }));\n    }\n  }\n  //update officesData\n  updateOfficesData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.editedOffices.userId = usersIdAsString;\n    } else {\n      this.editedOffices.userId = null;\n    }\n    this.store.dispatch(updateOfficesData({\n      item: this.editedOffices,\n      _id: getRandomId()\n    }));\n    this.editedOffices = {};\n    this.resetFormFields(form);\n    this.successUpdate = true;\n    this.successAdd = false;\n    this.showAddForm = true;\n  }\n  editOfficesData(office) {\n    this.editedOffices = Object.assign({}, office);\n    this.showAddForm = false;\n  }\n  //filtering and pagination\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.officesDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeOfficesDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.officesDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeOfficesDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  ngOnInit() {\n    this.officesData$ = this.store.select(selectOfficesData).pipe(startWith(this.route.snapshot.data.OfficesData));\n    this.officesData$.pipe(filter(data => !!data)).subscribe(data => {\n      this.totalRecords$ = this.officesData$.pipe(map(x => x ? x[0] ? x[0].count : 0 : 0));\n    });\n  }\n  ngOnDestroy() {\n    var _a;\n    (_a = this.filtersSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nOfficesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nOfficesManagementComponent = __decorate([Component({\n  selector: \"app-officesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OfficesManagementComponent);\nexport { OfficesManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","selectOfficesData","selectOfficesDataFilters","environment","of","ActivatedRoute","Router","Subject","debounceTime","distinctUntilChanged","filter","firstValueFrom","map","startWith","take","getRandomId","addOfficesData","changeOfficesDataFilters","deleteOfficesData","updateOfficesData","selectIsLoading","OfficesManagementComponent","selectedOfficesData","_selectedOfficesData","value","constructor","store","router","route","officesName","officesCapacity","userId","officesType","usersId","Object","keys","office","officesData$","subscribe","data","forEach","expandedMap","officesId","isLoading$","select","pipe","officesDataFilters$","filtersSub","filtersSubj$","asObservable","a","dispatch","lastSearch$","f","filtering","length","addOffice","form","selectedType","selectedUsers","selectedUsersIds","user","usersIdAsString","join","item","_id","resetFormFields","successAdd","successUpdate","resetForm","editedOffices","showAddForm","editOfficesData","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","predicate","kind","next","queryParams","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","ngOnInit","snapshot","OfficesData","totalRecords$","x","count","ngOnDestroy","unsubscribe","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\officesManagement\\officesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AppState, DynamicQueryPart, Filtering} from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport {OfficesData} from \"src/app/redux/offices/offices.state\";\r\nimport { selectOfficesData, selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\r\n\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, startWith, take} from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { addOfficesData, changeOfficesDataFilters, deleteOfficesData, updateOfficesData } from \"src/app/redux/offices/offices.actions\";\r\nimport { LazyLoadEvent } from \"primeng/api/lazyloadevent\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\n\r\n@Component({\r\n    selector: \"app-officesManagement\",\r\n    templateUrl: \"./officesManagement.component.html\",\r\n    styleUrls: [\"./officesManagement.component.scss\"],\r\n})\r\n\r\nexport class OfficesManagementComponent  implements OnInit, OnDestroy{ \r\n\r\n    officesData$: Observable<OfficesData[]> = of([]);\r\n\r\n    public editedOffices: Partial<OfficesData> = {};\r\n\r\n    office: Partial<OfficesData> = {\r\n        officesName : '',\r\n        officesCapacity : null,  \r\n        userId: null,\r\n    };\r\n\r\n    officesType: any = [ \r\n        { officesType: \"Ufficio standard\" },\r\n        { officesType: \"Sala riunioni\" },\r\n        { officesType: \"Sala ristoro\" },\r\n        { officesType: \"Ufficio amministrativo\" },\r\n        { officesType: \"Ufficio dirigenti\" },\r\n    ];\r\n    \r\n    selectedType: any = null;\r\n\r\n    //used to blocking some offices for only some user\r\n    usersId: any[] = [  //to fill with keyclock users VIP or Amministrazione\r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n\r\n    showAddForm = true;\r\n    successAdd: boolean = false;\r\n    successUpdate: boolean = false;\r\n\r\n    \r\n    expandedMap: { [key: number]: boolean } = {};\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    officesDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    globalFiltersFields = Object.keys(this.office);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedOfficesData: OfficesData;\r\n    get selectedOfficesData() {\r\n        return this._selectedOfficesData;\r\n    }\r\n    set selectedOfficesData(value: OfficesData) {\r\n        this._selectedOfficesData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        //this.officesData$ = store.select(selectOfficesData);\r\n        this.officesData$.subscribe((data) => {\r\n            if(data) { data.forEach((office) => {this.expandedMap[office.officesId] = false; });} });\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.officesDataFilters$ = store.select(selectOfficesDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        \r\n    }\r\n\r\n    //add officesData\r\n    addOffice(form: NgForm) {\r\n        if(this.selectedType) {\r\n            this.office.officesType = this.selectedType.officesType;\r\n        }\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.office.userId = usersIdAsString;\r\n        }\r\n\r\n        this.store.dispatch( addOfficesData({ item: this.office, _id: getRandomId() }) );\r\n    \r\n        this.resetFormFields(form);\r\n        this.successAdd = true;\r\n        this.successUpdate = false;\r\n    }\r\n\r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.office = {\r\n            officesName : '',\r\n            officesCapacity : null,\r\n            userId: null,\r\n        };\r\n        this.selectedType = [];\r\n        this.selectedUsers = [];\r\n    }\r\n \r\n    //delete officesData\r\n    deleteOfficesData(office:OfficesData){\r\n        if (office){\r\n            this.store.dispatch( deleteOfficesData({item: office, _id: getRandomId() }));\r\n        }\r\n    }\r\n\r\n    //update officesData\r\n    updateOfficesData(form: NgForm){\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.editedOffices.userId = usersIdAsString;\r\n        }\r\n        else{\r\n            this.editedOffices.userId = null;\r\n        }\r\n\r\n        this.store.dispatch( updateOfficesData({ item: this.editedOffices , _id: getRandomId() }) );\r\n        this.editedOffices = {};\r\n\r\n        this.resetFormFields(form);\r\n        this.successUpdate = true;\r\n        this.successAdd = false;\r\n        this.showAddForm = true;\r\n    }\r\n\r\n    editOfficesData(office: OfficesData) {\r\n        this.editedOffices  = { ...office }; \r\n        this.showAddForm = false;\r\n    }\r\n\r\n\r\n    //filtering and pagination\r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.officesDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeOfficesDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.officesDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField                \r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0}]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeOfficesDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.officesData$ = this.store.select(selectOfficesData).pipe(startWith(this.route.snapshot.data.OfficesData));\r\n        this.officesData$.pipe(\r\n            filter(data => !!data)\r\n        ).subscribe((data) => {\r\n            this.totalRecords$ = this.officesData$.pipe(map((x) => (x ? (x[0] ? x[0].count : 0) : 0)));\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.filtersSub?.unsubscribe();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}