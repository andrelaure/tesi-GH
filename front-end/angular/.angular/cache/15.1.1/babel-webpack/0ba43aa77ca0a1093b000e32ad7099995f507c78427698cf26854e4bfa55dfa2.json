{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./reservation.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./reservation.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Subject, debounceTime, distinctUntilChanged, map, of, take } from \"rxjs\";\nimport { Store } from \"@ngrx/store\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nimport { selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\nlet ReservationComponent = class ReservationComponent {\n  get selectedOfficesData() {\n    return this._selectedOfficesData;\n  }\n  set selectedOfficesData(value) {\n    this._selectedOfficesData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.officesData$ = of([]);\n    this.noticeData$ = of([]);\n    this.office = {\n      officesName: '',\n      officesCapacity: null,\n      officesType: null,\n      userId: null\n    };\n    this.expandedMap = {};\n    this.lastSearch$ = of(null);\n    this.officesDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.office);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.currentDate = new Date();\n    this.formattedDate = this.formatDateToDDMMYYYY(this.currentDate);\n    //this.officesData$ = store.select(selectOfficesData);\n    this.officesData$.subscribe(data => {\n      if (data) {\n        data.forEach(office => {\n          this.expandedMap[office.officesId] = false;\n        });\n      }\n    });\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.officesDataFilters$ = store.select(selectOfficesDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  formatDateToDDMMYYYY(date) {\n    date.setDate(date.getDate() + 1); //tomorrow\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const year = date.getFullYear().toString();\n    return `${day}/${month}/${year}`;\n  }\n};\nReservationComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nReservationComponent = __decorate([Component({\n  selector: \"app-reservation\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ReservationComponent);\nexport { ReservationComponent };","map":{"version":3,"mappings":"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","names":["Component","Subject","debounceTime","distinctUntilChanged","map","of","take","Store","ActivatedRoute","Router","selectIsLoading","selectOfficesDataFilters","ReservationComponent","selectedOfficesData","_selectedOfficesData","value","constructor","store","router","route","officesName","officesCapacity","officesType","userId","Object","keys","office","Date","formatDateToDDMMYYYY","currentDate","officesData$","subscribe","data","forEach","expandedMap","officesId","isLoading$","select","pipe","officesDataFilters$","filtersSub","filtersSubj$","asObservable","a","dispatch","lastSearch$","f","filtering","length","date","setDate","getDate","day","toString","padStart","month","getMonth","year","getFullYear","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\reservation\\reservation.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\n\r\nimport { NoticeComponent } from \"../notice/notice.component\";\r\nimport { OfficesManagementComponent } from \"../admin/officesManagement/officesManagement.component\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, map, of, take } from \"rxjs\";\r\nimport { OfficesData } from \"src/app/redux/offices/offices.state\";\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { AppState, DynamicQueryPart } from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { selectOfficesDataFilters } from \"src/app/redux/offices/offices.selectors\";\r\n\r\n@Component({\r\n    selector: \"app-reservation\",\r\n    templateUrl: \"./reservation.component.html\",\r\n    styleUrls: [\"./reservation.component.scss\"],\r\n})\r\n\r\nexport class ReservationComponent  { \r\n\r\n    officesData$: Observable<OfficesData[]> = of([]);\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n\r\n    office: Partial<OfficesData> = {\r\n        officesName : '',\r\n        officesCapacity : null,  \r\n        officesType: null,\r\n        userId: null,\r\n    };\r\n\r\n    expandedMap: { [key: number]: boolean } = {};\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    officesDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    globalFiltersFields = Object.keys(this.office);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedOfficesData: OfficesData;\r\n    get selectedOfficesData() {\r\n        return this._selectedOfficesData;\r\n    }\r\n    set selectedOfficesData(value: OfficesData) {\r\n        this._selectedOfficesData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        //this.officesData$ = store.select(selectOfficesData);\r\n        this.officesData$.subscribe((data) => {\r\n            if(data) { data.forEach((office) => {this.expandedMap[office.officesId] = false; });} });\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.officesDataFilters$ = store.select(selectOfficesDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectOfficesDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    currentDate = new Date();\r\n    formattedDate = this.formatDateToDDMMYYYY(this.currentDate);\r\n\r\n    private formatDateToDDMMYYYY(date: Date): string {\r\n        date.setDate(date.getDate()+1);  //tomorrow\r\n        const day = date.getDate().toString().padStart(2, '0'); \r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        const year = date.getFullYear().toString();\r\n      \r\n        return `${day}/${month}/${year}`;\r\n    }\r\n\r\n    //contrlli su tipi di uffici gi√† prenotati, massimo una prenotzione per tipologia\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}