{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./sample.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./sample.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { firstValueFrom, of, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged, map, startWith, take } from \"rxjs/operators\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nimport { selectSampleData, selectSampleDataFilters } from \"src/app/redux/sample/sample.selectors\";\nimport { changeSampleDataFilters } from \"src/app/redux/sample/sample.actions\";\nimport { environment } from \"src/environments/environment\";\nlet SamplesComponent = class SamplesComponent {\n  get selectedSampleData() {\n    return this._selectedSampleData;\n  }\n  set selectedSampleData(value) {\n    this._selectedSampleData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.lastSearch$ = of(null);\n    this.sampleData$ = of([]);\n    this.sampleDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this._dummy = {\n      sampleDataId: 0,\n      sampleDataDescr: \"dummy\",\n      sampleDataLocation: \"dummy\"\n    };\n    this.globalFiltersFields = Object.keys(this._dummy);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.sampleData$ = store.select(selectSampleData).pipe(startWith(route.snapshot.data.SampleData));\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.sampleDataFilters$ = store.select(selectSampleDataFilters);\n    this.totalRecords$ = this.sampleData$.pipe(map(x => x ? x[0] ? x[0].count : 0 : 0));\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectSampleDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.sampleDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeSampleDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.sampleDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeSampleDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    var _a;\n    (_a = this.filtersSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nSamplesComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nSamplesComponent = __decorate([Component({\n  selector: \"app-sample-data\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SamplesComponent);\nexport { SamplesComponent };","map":{"version":3,"mappings":"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","names":["Component","ActivatedRoute","Router","Store","firstValueFrom","of","Subject","debounceTime","distinctUntilChanged","map","startWith","take","getRandomId","selectIsLoading","selectSampleData","selectSampleDataFilters","changeSampleDataFilters","environment","SamplesComponent","selectedSampleData","_selectedSampleData","value","constructor","store","router","route","sampleDataId","sampleDataDescr","sampleDataLocation","Object","keys","_dummy","sampleData$","select","pipe","snapshot","data","SampleData","isLoading$","sampleDataFilters$","totalRecords$","x","count","filtersSub","filtersSubj$","asObservable","subscribe","a","dispatch","lastSearch$","f","filtering","length","filter","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","join","predicate","kind","next","queryParams","_id","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","ngOnInit","ngOnDestroy","unsubscribe","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\sample\\sample.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { firstValueFrom, Observable, of, Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, map, startWith, take } from \"rxjs/operators\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { SampleData } from \"src/app/redux/sample/sample.state\";\r\nimport { selectSampleData, selectSampleDataFilters } from \"src/app/redux/sample/sample.selectors\";\r\nimport { changeSampleDataFilters } from \"src/app/redux/sample/sample.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Component({\r\n    selector: \"app-sample-data\",\r\n    templateUrl: \"./sample.component.html\",\r\n    styleUrls: [\"./sample.component.scss\"],\r\n})\r\nexport class SamplesComponent implements OnInit, OnDestroy {\r\n    lastSearch$: Observable<string> = of(null);\r\n    sampleData$: Observable<SampleData[]> = of([]);\r\n    sampleDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    private _dummy: Partial<SampleData> = {\r\n        sampleDataId: 0,\r\n        sampleDataDescr: \"dummy\",\r\n        sampleDataLocation: \"dummy\",\r\n    };\r\n    globalFiltersFields = Object.keys(this._dummy);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedSampleData: SampleData;\r\n    get selectedSampleData() {\r\n        return this._selectedSampleData;\r\n    }\r\n    set selectedSampleData(value: SampleData) {\r\n        this._selectedSampleData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ) {\r\n        this.sampleData$ = store.select(selectSampleData).pipe(startWith(route.snapshot.data.SampleData));\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.sampleDataFilters$ = store.select(selectSampleDataFilters);\r\n        this.totalRecords$ = this.sampleData$.pipe(map((x) => (x ? (x[0] ? x[0].count : 0) : 0)));\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectSampleDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n    }\r\n\r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.sampleDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeSampleDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.sampleDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField\r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0 }]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeSampleDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    ngOnInit(): void {}\r\n\r\n    ngOnDestroy(): void {\r\n        this.filtersSub?.unsubscribe();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}