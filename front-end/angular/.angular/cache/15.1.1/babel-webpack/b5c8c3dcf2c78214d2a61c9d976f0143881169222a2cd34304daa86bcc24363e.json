{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectorRef, Component, Input } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { filter } from 'rxjs/operators';\nimport { MenuService } from './app.menu.service';\nimport { AppMainComponent } from './app.main.component';\nlet AppMenuitemComponent = class AppMenuitemComponent {\n  constructor(app, router, cd, menuService) {\n    this.app = app;\n    this.router = router;\n    this.cd = cd;\n    this.menuService = menuService;\n    this.active = false;\n    this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {\n      // deactivate current active menu\n      if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {\n        this.active = false;\n      }\n    });\n    this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\n      this.active = false;\n    });\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(params => {\n      if (this.item.routerLink) {\n        this.updateActiveStateFromRoute();\n      } else {\n        this.active = false;\n      }\n    });\n  }\n  ngOnInit() {\n    if (this.item.routerLink) {\n      this.updateActiveStateFromRoute();\n    }\n    this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);\n  }\n  updateActiveStateFromRoute() {\n    this.active = this.router.isActive(this.item.routerLink[0], this.item.items ? false : true);\n  }\n  itemClick(event) {\n    // avoid processing disabled items\n    if (this.item.disabled) {\n      event.preventDefault();\n      return true;\n    }\n    // notify other items\n    this.menuService.onMenuStateChange(this.key);\n    // execute command\n    if (this.item.command) {\n      this.item.command({\n        originalEvent: event,\n        item: this.item\n      });\n    }\n    // toggle active state\n    if (this.item.items) {\n      this.active = !this.active;\n    } else {\n      // activate item\n      this.active = true;\n      // hide overlay menus\n      this.app.menuActiveMobile = false;\n    }\n  }\n  ngOnDestroy() {\n    if (this.menuSourceSubscription) {\n      this.menuSourceSubscription.unsubscribe();\n    }\n    if (this.menuResetSubscription) {\n      this.menuResetSubscription.unsubscribe();\n    }\n  }\n};\nAppMenuitemComponent.ctorParameters = () => [{\n  type: AppMainComponent\n}, {\n  type: Router\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MenuService\n}];\nAppMenuitemComponent.propDecorators = {\n  item: [{\n    type: Input\n  }],\n  index: [{\n    type: Input\n  }],\n  root: [{\n    type: Input\n  }],\n  parentKey: [{\n    type: Input\n  }]\n};\nAppMenuitemComponent = __decorate([Component({\n  /* tslint:disable:component-selector */\n  selector: '[app-menuitem]',\n  /* tslint:enable:component-selector */\n  template: `\n\t\t<ng-container>\n\t\t\t<a [attr.href]=\"item.url\" (click)=\"itemClick($event)\"\n\t\t\t   *ngIf=\"!item.routerLink || item.items\" (keydown.enter)=\"itemClick($event)\"\n\t\t\t   [attr.target]=\"item.target\" [attr.tabindex]=\"0\" pRipple>\n\t\t\t\t<i [ngClass]=\"item.icon\"></i>\n\t\t\t\t<span>{{item.label}}</span>\n\t\t\t\t<span class=\"menuitem-badge\" *ngIf=\"item.badge\">{{item.badge}}</span>\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n\t\t\t</a>\n\t\t\t<a (click)=\"itemClick($event)\" *ngIf=\"item.routerLink && !item.items\"\n\t\t\t   [routerLink]=\"item.routerLink\" routerLinkActive=\"active-menuitem-routerlink\"\n\t\t\t   [routerLinkActiveOptions]=\"{exact: true}\" [attr.target]=\"item.target\" [attr.tabindex]=\"0\" pRipple>\n\t\t\t\t<i [ngClass]=\"item.icon\"></i>\n\t\t\t\t<span>{{item.label}}</span>\n\t\t\t\t<span class=\"menuitem-badge\" *ngIf=\"item.badge\">{{item.badge}}</span>\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n\t\t\t</a>\n\t\t\t<ul *ngIf=\"item.items && active\" [@children]=\"(active ? 'visibleAnimated' : 'hiddenAnimated')\">\n\t\t\t\t<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\n\t\t\t\t\t<li app-menuitem [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\n\t\t\t\t</ng-template>\n\t\t\t</ul>\n\t\t</ng-container>\n    `,\n  host: {\n    '[class.active-menuitem]': 'active'\n  },\n  animations: [trigger('children', [state('void', style({\n    height: '0px'\n  })), state('hiddenAnimated', style({\n    height: '0px'\n  })), state('visibleAnimated', style({\n    height: '*'\n  })), transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]\n})], AppMenuitemComponent);\nexport { AppMenuitemComponent };","map":{"version":3,"mappings":"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","names":["ChangeDetectorRef","Component","Input","NavigationEnd","Router","animate","state","style","transition","trigger","filter","MenuService","AppMainComponent","AppMenuitemComponent","constructor","app","router","cd","menuService","menuSourceSubscription","menuSource$","subscribe","key","active","indexOf","menuResetSubscription","resetSource$","events","pipe","event","params","item","routerLink","updateActiveStateFromRoute","ngOnInit","parentKey","index","String","isActive","items","itemClick","disabled","preventDefault","onMenuStateChange","command","originalEvent","menuActiveMobile","ngOnDestroy","unsubscribe","selector","template","host","animations","height"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\app.menuitem.component.ts"],"sourcesContent":["import {ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {NavigationEnd, Router} from '@angular/router';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {Subscription} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {MenuService} from './app.menu.service';\r\nimport {AppMainComponent} from './app.main.component';\r\n\r\n@Component({\r\n    /* tslint:disable:component-selector */\r\n    selector: '[app-menuitem]',\r\n    /* tslint:enable:component-selector */\r\n    template: `\r\n\t\t<ng-container>\r\n\t\t\t<a [attr.href]=\"item.url\" (click)=\"itemClick($event)\"\r\n\t\t\t   *ngIf=\"!item.routerLink || item.items\" (keydown.enter)=\"itemClick($event)\"\r\n\t\t\t   [attr.target]=\"item.target\" [attr.tabindex]=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\"></i>\r\n\t\t\t\t<span>{{item.label}}</span>\r\n\t\t\t\t<span class=\"menuitem-badge\" *ngIf=\"item.badge\">{{item.badge}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\t\t\t<a (click)=\"itemClick($event)\" *ngIf=\"item.routerLink && !item.items\"\r\n\t\t\t   [routerLink]=\"item.routerLink\" routerLinkActive=\"active-menuitem-routerlink\"\r\n\t\t\t   [routerLinkActiveOptions]=\"{exact: true}\" [attr.target]=\"item.target\" [attr.tabindex]=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\"></i>\r\n\t\t\t\t<span>{{item.label}}</span>\r\n\t\t\t\t<span class=\"menuitem-badge\" *ngIf=\"item.badge\">{{item.badge}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\t\t\t<ul *ngIf=\"item.items && active\" [@children]=\"(active ? 'visibleAnimated' : 'hiddenAnimated')\">\r\n\t\t\t\t<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\r\n\t\t\t\t\t<li app-menuitem [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</ul>\r\n\t\t</ng-container>\r\n    `,\r\n    host: {\r\n        '[class.active-menuitem]': 'active'\r\n    },\r\n    animations: [\r\n        trigger('children', [\r\n            state('void', style({\r\n                height: '0px'\r\n            })),\r\n            state('hiddenAnimated', style({\r\n                height: '0px'\r\n            })),\r\n            state('visibleAnimated', style({\r\n                height: '*'\r\n            })),\r\n            transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),\r\n            transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),\r\n            transition('void => visibleAnimated, visibleAnimated => void',\r\n                animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n        ])\r\n    ]\r\n})\r\nexport class AppMenuitemComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() item: any;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input() root: boolean;\r\n\r\n    @Input() parentKey: string;\r\n\r\n    active = false;\r\n\r\n    menuSourceSubscription: Subscription;\r\n\r\n    menuResetSubscription: Subscription;\r\n\r\n    key: string;\r\n\r\n    constructor(public app: AppMainComponent, public router: Router, private cd: ChangeDetectorRef, private menuService: MenuService) {\r\n        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {\r\n            // deactivate current active menu\r\n            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {\r\n                this.active = false;\r\n            }\r\n        });\r\n\r\n        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\r\n            this.active = false;\r\n        });\r\n\r\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe(params => {\r\n                if (this.item.routerLink) {\r\n                    this.updateActiveStateFromRoute();\r\n                } else {\r\n                    this.active = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.item.routerLink) {\r\n            this.updateActiveStateFromRoute();\r\n        }\r\n\r\n        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);\r\n    }\r\n\r\n    updateActiveStateFromRoute() {\r\n        this.active = this.router.isActive(this.item.routerLink[0], this.item.items ? false : true);\r\n    }\r\n\r\n    itemClick(event: Event) {\r\n        // avoid processing disabled items\r\n        if (this.item.disabled) {\r\n            event.preventDefault();\r\n            return true;\r\n        }\r\n\r\n        // notify other items\r\n        this.menuService.onMenuStateChange(this.key);\r\n\r\n        // execute command\r\n        if (this.item.command) {\r\n            this.item.command({originalEvent: event, item: this.item});\r\n        }\r\n\r\n        // toggle active state\r\n        if (this.item.items) {\r\n            this.active = !this.active;\r\n        } else {\r\n            // activate item\r\n            this.active = true;\r\n\r\n            // hide overlay menus\r\n            this.app.menuActiveMobile = false;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.menuSourceSubscription) {\r\n            this.menuSourceSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuResetSubscription) {\r\n            this.menuResetSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}