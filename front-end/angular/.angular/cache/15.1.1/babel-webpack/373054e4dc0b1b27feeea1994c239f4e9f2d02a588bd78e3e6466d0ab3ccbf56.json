{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./app.config.component.html?ngResource\";\nimport { Component, Input } from '@angular/core';\nimport { LayoutService } from \"../service/app.layout.service\";\nimport { MenuService } from \"../app.menu.service\";\nlet AppConfigComponent = class AppConfigComponent {\n  constructor(layoutService, menuService) {\n    this.layoutService = layoutService;\n    this.menuService = menuService;\n    this.minimal = false;\n    this.scales = [12, 13, 14, 15, 16];\n  }\n  get visible() {\n    return this.layoutService.state.configSidebarVisible;\n  }\n  set visible(_val) {\n    this.layoutService.state.configSidebarVisible = _val;\n  }\n  get scale() {\n    return this.layoutService.config.scale;\n  }\n  set scale(_val) {\n    this.layoutService.config.scale = _val;\n  }\n  get menuMode() {\n    return this.layoutService.config.menuMode;\n  }\n  set menuMode(_val) {\n    this.layoutService.config.menuMode = _val;\n  }\n  get inputStyle() {\n    return this.layoutService.config.inputStyle;\n  }\n  set inputStyle(_val) {\n    this.layoutService.config.inputStyle = _val;\n  }\n  get ripple() {\n    return this.layoutService.config.ripple;\n  }\n  set ripple(_val) {\n    this.layoutService.config.ripple = _val;\n  }\n  onConfigButtonClick() {\n    this.layoutService.showConfigSidebar();\n  }\n  changeTheme(theme, colorScheme) {\n    const themeLink = document.getElementById('theme-css');\n    const newHref = themeLink.getAttribute('href').replace(this.layoutService.config.theme, theme);\n    this.layoutService.config.colorScheme;\n    this.replaceThemeLink(newHref, () => {\n      this.layoutService.config.theme = theme;\n      this.layoutService.config.colorScheme = colorScheme;\n      this.layoutService.onConfigUpdate();\n    });\n  }\n  replaceThemeLink(href, onComplete) {\n    const id = 'theme-css';\n    const themeLink = document.getElementById('theme-css');\n    const cloneLinkElement = themeLink.cloneNode(true);\n    cloneLinkElement.setAttribute('href', href);\n    cloneLinkElement.setAttribute('id', id + '-clone');\n    themeLink.parentNode.insertBefore(cloneLinkElement, themeLink.nextSibling);\n    cloneLinkElement.addEventListener('load', () => {\n      themeLink.remove();\n      cloneLinkElement.setAttribute('id', id);\n      onComplete();\n    });\n  }\n  decrementScale() {\n    this.scale--;\n    this.applyScale();\n  }\n  incrementScale() {\n    this.scale++;\n    this.applyScale();\n  }\n  applyScale() {\n    document.documentElement.style.fontSize = this.scale + 'px';\n  }\n};\nAppConfigComponent.ctorParameters = () => [{\n  type: LayoutService\n}, {\n  type: MenuService\n}];\nAppConfigComponent.propDecorators = {\n  minimal: [{\n    type: Input\n  }]\n};\nAppConfigComponent = __decorate([Component({\n  selector: 'app-config',\n  template: __NG_CLI_RESOURCE__0\n})], AppConfigComponent);\nexport { AppConfigComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","LayoutService","MenuService","AppConfigComponent","constructor","layoutService","menuService","visible","state","configSidebarVisible","_val","scale","config","menuMode","inputStyle","ripple","onConfigButtonClick","showConfigSidebar","changeTheme","theme","colorScheme","themeLink","document","getElementById","newHref","getAttribute","replace","replaceThemeLink","onConfigUpdate","href","onComplete","id","cloneLinkElement","cloneNode","setAttribute","parentNode","insertBefore","nextSibling","addEventListener","remove","decrementScale","applyScale","incrementScale","documentElement","style","fontSize","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\layout\\config\\app.config.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { LayoutService } from \"../service/app.layout.service\";\r\nimport { MenuService } from \"../app.menu.service\";\r\n\r\n@Component({\r\n    selector: 'app-config',\r\n    templateUrl: './app.config.component.html'\r\n})\r\nexport class AppConfigComponent {\r\n\r\n    @Input() minimal: boolean = false;\r\n\r\n    scales: number[] = [12, 13, 14, 15, 16];\r\n\r\n    constructor(public layoutService: LayoutService, public menuService: MenuService) { }\r\n\r\n    get visible(): boolean {\r\n        return this.layoutService.state.configSidebarVisible;\r\n    }\r\n\r\n    set visible(_val: boolean) {\r\n        this.layoutService.state.configSidebarVisible = _val;\r\n    }\r\n\r\n    get scale(): number {\r\n        return this.layoutService.config.scale;\r\n    }\r\n\r\n    set scale(_val: number) {\r\n        this.layoutService.config.scale = _val;\r\n    }\r\n\r\n    get menuMode(): string {\r\n        return this.layoutService.config.menuMode;\r\n    }\r\n\r\n    set menuMode(_val: string) {\r\n        this.layoutService.config.menuMode = _val;\r\n    }\r\n\r\n    get inputStyle(): string {\r\n        return this.layoutService.config.inputStyle;\r\n    }\r\n\r\n    set inputStyle(_val: string) {\r\n        this.layoutService.config.inputStyle = _val;\r\n    }\r\n\r\n    get ripple(): boolean {\r\n        return this.layoutService.config.ripple;\r\n    }\r\n\r\n    set ripple(_val: boolean) {\r\n        this.layoutService.config.ripple = _val;\r\n    }\r\n\r\n    onConfigButtonClick() {\r\n        this.layoutService.showConfigSidebar();\r\n    }\r\n\r\n    changeTheme(theme: string, colorScheme: string) {\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n\r\n    decrementScale() {\r\n        this.scale--;\r\n        this.applyScale();\r\n    }\r\n\r\n    incrementScale() {\r\n        this.scale++;\r\n        this.applyScale();\r\n    }\r\n\r\n    applyScale() {\r\n        document.documentElement.style.fontSize = this.scale + 'px';\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}