{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Subject, debounceTime, distinctUntilChanged, firstValueFrom, map, of, startWith, take } from \"rxjs\";\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { Store } from \"@ngrx/store\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nimport { changeNoticeDataFilters } from \"src/app/redux/notice/notice.actions\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\nimport { environment } from \"src/environments/environment\";\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  addNotice(notice) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(', ');\n      this.notification.userId = usersIdAsString;\n    }\n    console.log(\"Notifica aggiunta:\", this.notification);\n  }\n  deleteNotice(notice) {\n    // onCascade a tutti quelli a cui Ã¨ stata inviata\n  }\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.notification = {\n      noticeId: 0,\n      noticeState: false,\n      noticeDateTime: new Date(),\n      noticeTitle: '',\n      noticeObject: '',\n      noticeDesc: '',\n      userId: null\n    };\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }, {\n      usersId: \"Utente 4\"\n    }, {\n      usersId: \"Utente 5\"\n    }, {\n      usersId: \"Utente 6\"\n    }];\n    this.selectedUsers = [];\n    this.lastSearch$ = of(null);\n    this.noticeData$ = of([]);\n    this.noticeDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.notification);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.totalRecords$ = this.noticeData$.pipe(map(x => x ? x[0] ? x[0].count : 0 : 0));\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: $event.sortOrder > 0\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    var _a;\n    (_a = this.filtersSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nNoticesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  imports: [InputTextModule, InputTextareaModule],\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAA2B,eAAe;AAC5D,SAAqBC,OAAO,EAAgBC,YAAY,EAAEC,oBAAoB,EAAEC,cAAc,EAAWC,GAAG,EAAEC,EAAE,EAAEC,SAAS,EAAEC,IAAI,QAAQ,MAAM;AAC/I,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,mBAAmB,QAAQ,uBAAuB;AAK3D,SAAiBC,KAAK,QAAQ,aAAa;AAC3C,SAASC,MAAM,EAAEC,cAAc,QAAQ,iBAAiB;AAExD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,eAAe,QAAQ,yCAAyC;AACzE,SAASC,uBAAuB,QAAQ,qCAAqC;AAC7E,SAASC,gBAAgB,EAAEC,uBAAuB,QAAQ,uCAAuC;AACjG,SAASC,WAAW,QAAQ,8BAA8B;AAWnD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAuBnCC,SAAS,CAACC,MAAiB;IAEvB,IAAI,IAAI,CAACC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAC;MAC9B,MAAMC,gBAAgB,GAAa,IAAI,CAACF,aAAa,CAAClB,GAAG,CAAEqB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC;MACjF,MAAMC,eAAe,GAAWH,gBAAgB,CAACI,IAAI,CAAC,IAAI,CAAC;MAC3D,IAAI,CAACC,YAAY,CAACC,MAAM,GAAGH,eAAe;;IAI9CI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACH,YAAY,CAAC;EACxD;EAEAI,YAAY,CAACZ,MAAiB;IAC1B;EAAA;EAgBJ,IAAIa,kBAAkB;IAClB,OAAO,IAAI,CAACC,mBAAmB;EACnC;EACA,IAAID,kBAAkB,CAACE,KAAiB;IACpC,IAAI,CAACD,mBAAmB,GAAGC,KAAK;EACpC;EAEAC,YACYC,KAAsB,EACtBC,MAAc,EACdC,KAAqB;IAFrB,UAAK,GAALF,KAAK;IACL,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IA5DjB,iBAAY,GAAwB;MAChCC,QAAQ,EAAE,CAAC;MACXC,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE,IAAIC,IAAI,EAAE;MAC1BC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,EAAE;MACdjB,MAAM,EAAE;KACT;IAEH,YAAO,GAAU,CACb;MAAEJ,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,EACvB;MAAEA,OAAO,EAAE;IAAU,CAAE,CAC1B;IAED,kBAAa,GAAU,EAAE;IAmBzB,gBAAW,GAAuBrB,EAAE,CAAC,IAAI,CAAC;IAC1C,gBAAW,GAA6BA,EAAE,CAAC,EAAE,CAAC;IAC9C,uBAAkB,GAAiCA,EAAE,CAAC,EAAE,CAAC;IAEzD,kBAAa,GAAuBA,EAAE,CAAC,CAAC,CAAC;IAEzC,wBAAmB,GAAG2C,MAAM,CAACC,IAAI,CAAC,IAAI,CAACpB,YAAY,CAAC;IACpD,iBAAY,GAAG,IAAI7B,OAAO,EAAU;IAG5B,gBAAW,GAAY,IAAI;IAc/B,IAAI,CAACkD,WAAW,GAAGZ,KAAK,CAACa,MAAM,CAACnC,gBAAgB,CAAC,CAACoC,IAAI,CAAC9C,SAAS,CAACkC,KAAK,CAACa,QAAQ,CAACC,IAAI,CAACC,UAAU,CAAC,CAAC;IACjG,IAAI,CAACC,UAAU,GAAGlB,KAAK,CAACa,MAAM,CAACrC,eAAe,CAAC,CAACsC,IAAI,CAAClD,oBAAoB,EAAE,CAAC;IAC5E,IAAI,CAACuD,kBAAkB,GAAGnB,KAAK,CAACa,MAAM,CAAClC,uBAAuB,CAAC;IAC/D,IAAI,CAACyC,aAAa,GAAG,IAAI,CAACR,WAAW,CAACE,IAAI,CAAChD,GAAG,CAAEuD,CAAC,IAAMA,CAAC,GAAIA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,CAAC,GAAI,CAAE,CAAC,CAAC;IACzF,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,YAAY,CAACC,YAAY,EAAE,CAACX,IAAI,CAACnD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC+D,SAAS,CAAEC,CAAC,IAAK,IAAI,CAAC3B,KAAK,CAAC4B,QAAQ,CAACD,CAAC,CAAC,CAAC;IACpH,IAAI,CAACE,WAAW,GAAG7B,KAAK,CAACa,MAAM,CAAClC,uBAAuB,CAAC,CAACmC,IAAI,CAAC7C,IAAI,CAAC,CAAC,CAAC,EAAEH,GAAG,CAAEgE,CAAC,IAAKA,CAAC,CAACC,SAAS,IAAID,CAAC,CAACC,SAAS,CAAC9C,MAAM,GAAG,CAAC,GAAG6C,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,CAACjC,KAAK,GAAG,EAAE,CAAC,CAAC;EACzJ;EAEMkC,MAAM,CAAClC,KAAa;;MACtB,MAAMmC,kBAAkB,GAAG,MAAMpE,cAAc,CAAC,IAAI,CAACsD,kBAAkB,CAACL,IAAI,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MACtF,MAAMiE,cAAc,mCACbD,kBAAkB;QACrBE,MAAM,EAAEF,kBAAkB,CAACE,MAAM,GAC3BF,kBAAkB,CAACE,MAAM,GACzB;UAAEC,IAAI,EAAE,CAAC;UAAEnE,IAAI,EAAEW,WAAW,CAACyD;QAA0B,CAAE;QAC/DN,SAAS,EAAEjC,KAAK,GACV,CAAC;UAAEwC,MAAM,EAAE,IAAI,CAACC,mBAAmB,CAACjD,IAAI,CAAC,GAAG,CAAC;UAAEkD,SAAS,EAAE,IAAI;UAAE1C,KAAK,EAAEA,KAAK;UAAE2C,IAAI,EAAE;QAAQ,CAAe,CAAC,GAC5G;MAAE,EACX;MACD,IAAI,CAACjB,YAAY,CAACkB,IAAI,CAACjE,uBAAuB,CAAC;QAAEkE,WAAW,EAAET,cAAc;QAAEU,GAAG,EAAErE,WAAW;MAAE,CAAE,CAAC,CAAC;IACxG,CAAC;;EAEKsE,IAAI,CAACC,MAAqB;;MAC5B,IAAI,IAAI,CAACC,WAAW,EAAE;QAClB,IAAI,CAACA,WAAW,GAAG,KAAK;QACxB;;MAEJ,MAAMd,kBAAkB,GAAG,MAAMpE,cAAc,CAAC,IAAI,CAACsD,kBAAkB,CAACL,IAAI,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MACtF,MAAMiE,cAAc,mCACbD,kBAAkB;QACrBe,QAAQ,EAAEF,MAAM,CAACG,SAAS,GACpB,CAAC;UAAEX,MAAM,EAAEQ,MAAM,CAACG,SAAS;UAAEC,YAAY,EAAE,EAAE;UAAEC,UAAU,EAAEL,MAAM,CAACM,SAAS,GAAG;QAAC,CAAE,CAAC,GAClF,EAAE;QACRjB,MAAM,EAAEF,kBAAkB,CAACE,MAAM,GAC1BW,MAAM,CAACO,KAAK,KAAK,IAAI,IAAIP,MAAM,CAACO,KAAK,KAAKC,SAAS,GAChD;UAAElB,IAAI,EAAEU,MAAM,CAACO,KAAK;UAAEpF,IAAI,EAAE6E,MAAM,CAACS;QAAI,CAAE,GACzCtB,kBAAkB,CAACE,MAAM,GAC7B;UAAEC,IAAI,EAAE,CAAC;UAAEnE,IAAI,EAAEW,WAAW,CAACyD;QAA0B;MAAE,EAClE;MACD,IAAI,CAACb,YAAY,CAACkB,IAAI,CAACjE,uBAAuB,CAAC;QAAEkE,WAAW,EAAET,cAAc;QAAEU,GAAG,EAAErE,WAAW;MAAE,CAAE,CAAC,CAAC;IACxG,CAAC;;EAEDiF,QAAQ,IAAU;EAElBC,WAAW;;IACP,UAAI,CAAClC,UAAU,0CAAEmC,WAAW,EAAE;EAClC;;;;;;;;;AA9GS7E,0BAA0B,eARtCpB,SAAS,CAAC;EACPkG,QAAQ,EAAE,uBAAuB;EACjCC,8BAAiD;EAEjDC,OAAO,EAAC,CAAC3F,eAAe,EAAEC,mBAAmB,CAAC;;CAEjD,CAAC,GAEWU,0BAA0B,CA+GtC;SA/GYA,0BAA0B","names":["Component","Subject","debounceTime","distinctUntilChanged","firstValueFrom","map","of","startWith","take","InputTextModule","InputTextareaModule","Store","Router","ActivatedRoute","getRandomId","selectIsLoading","changeNoticeDataFilters","selectNoticeData","selectNoticeDataFilters","environment","NoticesManagementComponent","addNotice","notice","selectedUsers","length","selectedUsersIds","user","usersId","usersIdAsString","join","notification","userId","console","log","deleteNotice","selectedNoticeData","_selectedNoticeData","value","constructor","store","router","route","noticeId","noticeState","noticeDateTime","Date","noticeTitle","noticeObject","noticeDesc","Object","keys","noticeData$","select","pipe","snapshot","data","NoticeData","isLoading$","noticeDataFilters$","totalRecords$","x","count","filtersSub","filtersSubj$","asObservable","subscribe","a","dispatch","lastSearch$","f","filtering","filter","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","predicate","kind","next","queryParams","_id","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","sortOrder","first","undefined","rows","ngOnInit","ngOnDestroy","unsubscribe","selector","template","imports"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, firstValueFrom, isEmpty, map, of, startWith, take } from \"rxjs\";\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea'\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport {FormControl, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { changeNoticeDataFilters } from \"src/app/redux/notice/notice.actions\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],\r\n    imports:[InputTextModule, InputTextareaModule],\r\n    \r\n})\r\n\r\nexport class NoticesManagementComponent  { \r\n\r\n    notification: Partial<NoticeData> = {\r\n        noticeId: 0,\r\n        noticeState: false,\r\n        noticeDateTime: new Date(),\r\n        noticeTitle: '',\r\n        noticeObject: '',\r\n        noticeDesc: '',\r\n        userId: null,\r\n      };\r\n\r\n    usersId: any[] = [  \r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n        { usersId: \"Utente 4\" },\r\n        { usersId: \"Utente 5\" },\r\n        { usersId: \"Utente 6\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n\r\n    addNotice(notice:NoticeData){\r\n\r\n        if (this.selectedUsers.length > 0){\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(', ');\r\n            this.notification.userId = usersIdAsString;\r\n\r\n        }\r\n\r\n        console.log(\"Notifica aggiunta:\", this.notification);\r\n    }\r\n\r\n    deleteNotice(notice:NoticeData){\r\n        // onCascade a tutti quelli a cui Ã¨ stata inviata\r\n    }\r\n\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n\r\n    globalFiltersFields = Object.keys(this.notification);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.totalRecords$ = this.noticeData$.pipe(map((x) => (x ? (x[0] ? x[0].count : 0) : 0)));\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n    }\r\n      \r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField\r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: $event.sortOrder > 0 }]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    ngOnInit(): void {}\r\n\r\n    ngOnDestroy(): void {\r\n        this.filtersSub?.unsubscribe();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}