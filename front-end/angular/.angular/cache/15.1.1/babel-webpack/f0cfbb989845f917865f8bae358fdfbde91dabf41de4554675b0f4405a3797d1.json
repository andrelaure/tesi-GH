{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\nimport { sendNoticeData } from \"src/app/redux/notice/notice.actions\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Subject, debounceTime, distinctUntilChanged, map, take } from \"rxjs\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.noticeData$ = of([]);\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: '01012023',\n      noticeTitle: '',\n      noticeObject: '',\n      noticeDesc: '',\n      userId: null\n    };\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }, {\n      usersId: \"Utente 4\"\n    }, {\n      usersId: \"Utente 5\"\n    }, {\n      usersId: \"Utente 6\"\n    }];\n    this.selectedUsers = [];\n    this.succuessSubmit = false;\n    //notices table\n    this.lastSearch$ = of(null);\n    this.noticeDataFilters$ = of({});\n    this.personalTotalRecords$ = of(0);\n    this.generalTotalRecords$ = of(0);\n    this.personalNotices$ = of([]);\n    this.generalNotices$ = of([]);\n    this.expandedMap = {};\n    this._defaultND = {\n      noticeId: 0,\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"dummy\",\n      noticeObject: \"dummy\",\n      noticeDesc: \"dummy\"\n    };\n    this.globalFiltersFields = Object.keys(this._defaultND);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.noticeData$ = store.select(selectNoticeData);\n    //notices table\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n    this.noticeData$.subscribe(data => {\n      data.forEach(notice => {\n        this.expandedMap[notice.noticeId] = false;\n      });\n    });\n  }\n  //addNotice Form\n  addNoticeData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.notification.userId = usersIdAsString;\n    }\n    //add to db\n    this.store.dispatch(sendNoticeData({\n      item: this.notification,\n      _id: getRandomId()\n    }));\n    //console.log(\"Notifica aggiunta:\", this.notification);\n    this.resetFormFields(form);\n    this.succuessSubmit = true;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"\",\n      noticeObject: \"\",\n      noticeDesc: \"\",\n      userId: null\n    };\n    this.selectedUsers = [];\n  }\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  deleteNoticeData(notice) {\n    //delete from db\n  }\n};\nNoticesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","selectNoticeData","selectNoticeDataFilters","sendNoticeData","of","ActivatedRoute","Router","Subject","debounceTime","distinctUntilChanged","map","take","getRandomId","selectIsLoading","NoticesManagementComponent","constructor","store","router","route","noticeState","noticeDateTime","noticeTitle","noticeObject","noticeDesc","userId","usersId","noticeId","Object","keys","_defaultND","noticeData$","select","isLoading$","pipe","noticeDataFilters$","filtersSub","filtersSubj$","asObservable","subscribe","a","dispatch","lastSearch$","f","filtering","length","value","data","forEach","notice","expandedMap","addNoticeData","form","selectedUsers","selectedUsersIds","user","usersIdAsString","join","notification","item","_id","resetFormFields","succuessSubmit","resetForm","selectedNoticeData","_selectedNoticeData","deleteNoticeData","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\n\r\nimport { AppState, DynamicQueryPart } from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { changeNoticeDataFilters, sendNoticeData } from \"src/app/redux/notice/notice.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable, Subject, Subscription, debounceTime, distinctUntilChanged, map, startWith, take } from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],\r\n    //imports:[InputTextModule, InputTextareaModule],\r\n    \r\n})\r\n\r\nexport class NoticesManagementComponent  { \r\n\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n\r\n    notification: Partial<NoticeData> = {\r\n        noticeState: false,\r\n        noticeDateTime: '01012023',\r\n        noticeTitle: '',\r\n        noticeObject: '',\r\n        noticeDesc: '',\r\n        userId: null,\r\n      };\r\n\r\n    usersId: any[] = [  //to fill with keyclock users\r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n        { usersId: \"Utente 4\" },\r\n        { usersId: \"Utente 5\" },\r\n        { usersId: \"Utente 6\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n    succuessSubmit: boolean = false;\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.noticeData$ = store.select(selectNoticeData);\r\n\r\n        //notices table\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        this.noticeData$.subscribe((data) => { data.forEach((notice) => {this.expandedMap[notice.noticeId] = false })});\r\n    }\r\n\r\n    //addNotice Form\r\n\r\n    addNoticeData(form: NgForm) {\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.notification.userId = usersIdAsString;\r\n        }\r\n        //add to db\r\n        this.store.dispatch( sendNoticeData({ item: this.notification, _id: getRandomId() }) );\r\n        //console.log(\"Notifica aggiunta:\", this.notification);\r\n    \r\n        this.resetFormFields(form);\r\n        this.succuessSubmit = true;\r\n    }\r\n    \r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.notification = {\r\n            noticeState: false,\r\n            noticeDateTime: \"01012023\",\r\n            noticeTitle: \"\",\r\n            noticeObject: \"\",\r\n            noticeDesc: \"\",\r\n            userId: null,\r\n        };\r\n        this.selectedUsers = [];\r\n    }\r\n\r\n    //notices table\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n\r\n    personalTotalRecords$: Observable<number> = of(0);\r\n    generalTotalRecords$: Observable<number> = of(0);\r\n    personalNotices$: Observable<NoticeData[]> = of([]);\r\n    generalNotices$: Observable<NoticeData[]> = of([]);\r\n    \r\n    expandedMap: { [key: number]: boolean } = {};\r\n\r\n    private _defaultND: Partial<NoticeData> = {\r\n        noticeId: 0,\r\n        noticeState: false,\r\n        noticeDateTime: \"01012023\",\r\n        noticeTitle: \"dummy\",\r\n        noticeObject: \"dummy\",\r\n        noticeDesc: \"dummy\",\r\n    };\r\n    \r\n    globalFiltersFields = Object.keys(this._defaultND);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n    deleteNoticeData(notice:NoticeData){\r\n        //delete from db\r\n    }\r\n      \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}