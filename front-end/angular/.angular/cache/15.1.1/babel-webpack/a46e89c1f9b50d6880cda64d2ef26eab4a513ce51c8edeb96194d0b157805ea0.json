{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\nimport { changeNoticeDataFilters, sendNoticeData, deleteNoticeData, updateNoticeData } from \"src/app/redux/notice/notice.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Subject, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, startWith, take } from \"rxjs\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  constructor(store, router, route) {\n    //notices table\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.noticeData$ = of([]);\n    this.editedNotice = {};\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: '01012023',\n      noticeTitle: '',\n      noticeObject: '',\n      noticeDesc: '',\n      userId: null\n    };\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }, {\n      usersId: \"Utente 4\"\n    }, {\n      usersId: \"Utente 5\"\n    }, {\n      usersId: \"Utente 6\"\n    }];\n    this.selectedUsers = [];\n    this.showAddForm = true;\n    this.successAdd = false;\n    this.successUpdate = false;\n    this.selectedNoticeForUpdate = null;\n    // notices table\n    this.lastSearch$ = of(null);\n    this.noticeDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.expandedMap = {};\n    this.globalFiltersFields = Object.keys(this.notification);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    //this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\n    this.noticeData$.subscribe(data => {\n      if (data) {\n        data.forEach(notice => {\n          this.expandedMap[notice.noticeId] = false;\n        });\n      }\n    });\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  //ADD\n  addNoticeData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.notification.userId = usersIdAsString;\n    }\n    this.store.dispatch(sendNoticeData({\n      item: this.notification,\n      _id: getRandomId()\n    }));\n    this.resetFormFields(form);\n    this.successAdd = true;\n    this.successUpdate = false;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.notification = {\n      noticeState: false,\n      noticeDateTime: \"01012023\",\n      noticeTitle: \"\",\n      noticeObject: \"\",\n      noticeDesc: \"\",\n      userId: null\n    };\n    this.selectedUsers = [];\n  }\n  //DELETE\n  deleteNoticeData(notice) {\n    if (notice) {\n      this.store.dispatch(deleteNoticeData({\n        item: notice,\n        _id: getRandomId()\n      }));\n    }\n  }\n  //UPDATE\n  updateNoticeData(form) {\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.editedNotice.userId = usersIdAsString;\n    } else {\n      this.editedNotice.userId = null;\n    }\n    this.store.dispatch(updateNoticeData({\n      item: this.editedNotice,\n      _id: getRandomId()\n    }));\n    this.editedNotice = {};\n    this.resetFormFields(form);\n    this.successUpdate = true;\n    this.successAdd = false;\n    this.showAddForm = true;\n  }\n  editNoticeData(notice) {\n    this.editedNotice = Object.assign({}, notice);\n    this.showAddForm = false;\n  }\n  //notices table functions\n  filter(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        paging: currentQueryParams.paging ? currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        },\n        filtering: value ? [{\n          column: this.globalFiltersFields.join(\",\"),\n          predicate: \"LK\",\n          value: value,\n          kind: \"STRING\"\n        }] : []\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  sort($event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._firstQuery) {\n        this._firstQuery = false;\n        return;\n      }\n      const currentQueryParams = yield firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\n      const newQueryParams = Object.assign(Object.assign({}, currentQueryParams), {\n        ordering: $event.sortField ? [{\n          column: $event.sortField,\n          columnPrefix: \"\",\n          descending: true\n        }] : [],\n        paging: currentQueryParams.paging ? $event.first !== null || $event.first !== undefined ? {\n          skip: $event.first,\n          take: $event.rows\n        } : currentQueryParams.paging : {\n          skip: 0,\n          take: environment.defaultNumberOfRowsPerPage\n        }\n      });\n      this.filtersSubj$.next(changeNoticeDataFilters({\n        queryParams: newQueryParams,\n        _id: getRandomId()\n      }));\n    });\n  }\n  toggleRow(noticeId) {\n    this.expandedMap[noticeId] = !this.expandedMap[noticeId];\n  }\n  isRowExpanded(noticeId) {\n    return this.expandedMap[noticeId];\n  }\n  ngOnInit() {\n    this.noticeData$ = this.store.select(selectNoticeData).pipe(startWith(this.route.snapshot.data.NoticeData));\n    this.noticeData$.pipe(filter(data => !!data)).subscribe(data => {\n      this.totalRecords$ = this.noticeData$.pipe(map(x => x ? x[0] ? x[0].count : 0 : 0));\n    });\n  }\n  ngOnDestroy() {\n    var _a;\n    (_a = this.filtersSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nNoticesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","selectNoticeData","selectNoticeDataFilters","changeNoticeDataFilters","sendNoticeData","deleteNoticeData","updateNoticeData","environment","of","ActivatedRoute","Router","Subject","debounceTime","distinctUntilChanged","filter","firstValueFrom","map","startWith","take","getRandomId","selectIsLoading","NoticesManagementComponent","selectedNoticeData","_selectedNoticeData","value","constructor","store","router","route","noticeState","noticeDateTime","noticeTitle","noticeObject","noticeDesc","userId","usersId","Object","keys","notification","noticeData$","subscribe","data","forEach","notice","expandedMap","noticeId","isLoading$","select","pipe","noticeDataFilters$","filtersSub","filtersSubj$","asObservable","a","dispatch","lastSearch$","f","filtering","length","addNoticeData","form","selectedUsers","selectedUsersIds","user","usersIdAsString","join","item","_id","resetFormFields","successAdd","successUpdate","resetForm","editedNotice","showAddForm","editNoticeData","currentQueryParams","newQueryParams","paging","skip","defaultNumberOfRowsPerPage","column","globalFiltersFields","predicate","kind","next","queryParams","sort","$event","_firstQuery","ordering","sortField","columnPrefix","descending","first","undefined","rows","toggleRow","isRowExpanded","ngOnInit","snapshot","NoticeData","totalRecords$","x","count","ngOnDestroy","unsubscribe","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { changeNoticeDataFilters, sendNoticeData, deleteNoticeData, updateNoticeData, searchNoticeData } from \"src/app/redux/notice/notice.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable, Subject, Subscription, count, debounceTime, distinctUntilChanged, filter, firstValueFrom, map, startWith, take } from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { LazyLoadEvent } from \"primeng/api/lazyloadevent\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],    \r\n})\r\n\r\nexport class NoticesManagementComponent implements OnInit, OnDestroy { \r\n\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n\r\n    public editedNotice: Partial<NoticeData> = {};\r\n\r\n    notification: Partial<NoticeData> = {\r\n        noticeState: false,\r\n        noticeDateTime: '01012023',\r\n        noticeTitle: '',\r\n        noticeObject: '',\r\n        noticeDesc: '',\r\n        userId: null,\r\n      };\r\n\r\n    usersId: any[] = [  //to fill with keyclock users\r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n        { usersId: \"Utente 4\" },\r\n        { usersId: \"Utente 5\" },\r\n        { usersId: \"Utente 6\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n    showAddForm = true;\r\n    successAdd: boolean = false;\r\n    successUpdate: boolean = false;\r\n    selectedNoticeForUpdate: NoticeData | null = null;\r\n\r\n\r\n    // notices table\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    \r\n    expandedMap: { [key: number]: boolean } = {};\r\n    \r\n    globalFiltersFields = Object.keys(this.notification);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n\r\n        //notices table\r\n        \r\n        //this.noticeData$ = store.select(selectNoticeData).pipe(startWith(route.snapshot.data.NoticeData));\r\n        this.noticeData$.subscribe((data) => {\r\n            if(data) { data.forEach((notice) => {this.expandedMap[notice.noticeId] = false; });} });\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        \r\n    }\r\n\r\n    //ADD\r\n    addNoticeData(form: NgForm) {\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.notification.userId = usersIdAsString;\r\n        }\r\n        this.store.dispatch( sendNoticeData({ item: this.notification, _id: getRandomId() }) );\r\n    \r\n        this.resetFormFields(form);\r\n        this.successAdd = true;\r\n        this.successUpdate = false;\r\n    }\r\n\r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.notification = {\r\n            noticeState: false,\r\n            noticeDateTime: \"01012023\",\r\n            noticeTitle: \"\",\r\n            noticeObject: \"\",\r\n            noticeDesc: \"\",\r\n            userId: null,\r\n        };\r\n        this.selectedUsers = [];\r\n    }\r\n\r\n    //DELETE\r\n    deleteNoticeData(notice:NoticeData){\r\n        if (notice){\r\n            this.store.dispatch( deleteNoticeData({item: notice, _id: getRandomId() }));\r\n        }\r\n    }\r\n\r\n    //UPDATE\r\n    updateNoticeData(form: NgForm){\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.editedNotice.userId = usersIdAsString;\r\n        }\r\n        else{\r\n            this.editedNotice.userId = null;\r\n        }\r\n\r\n        this.store.dispatch( updateNoticeData({ item: this.editedNotice , _id: getRandomId() }) );\r\n        this.editedNotice = {};\r\n\r\n        this.resetFormFields(form);\r\n        this.successUpdate = true;\r\n        this.successAdd = false;\r\n        this.showAddForm = true;\r\n    }\r\n\r\n    editNoticeData(notice: NoticeData) {\r\n        this.editedNotice  = { ...notice }; \r\n        this.showAddForm = false;\r\n    }\r\n\r\n\r\n    //notices table functions\r\n    \r\n    async filter(value: string) {\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams: DynamicQueryPart = {\r\n            ...currentQueryParams,\r\n            paging: currentQueryParams.paging\r\n                ? currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n            filtering: value\r\n                ? [{ column: this.globalFiltersFields.join(\",\"), predicate: \"LK\", value: value, kind: \"STRING\" } as Filtering]\r\n                : []\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n\r\n    async sort($event: LazyLoadEvent) {\r\n        if (this._firstQuery) {\r\n            this._firstQuery = false;\r\n            return;\r\n        }\r\n        const currentQueryParams = await firstValueFrom(this.noticeDataFilters$.pipe(take(1)));\r\n        const newQueryParams = {\r\n            ...currentQueryParams,\r\n            ordering: $event.sortField                \r\n                ? [{ column: $event.sortField, columnPrefix: \"\", descending: true}]\r\n                : [],\r\n            paging: currentQueryParams.paging\r\n                ? ($event.first !== null || $event.first !== undefined)\r\n                    ? { skip: $event.first, take: $event.rows }\r\n                    : currentQueryParams.paging\r\n                : { skip: 0, take: environment.defaultNumberOfRowsPerPage }\r\n        };\r\n        this.filtersSubj$.next(changeNoticeDataFilters({ queryParams: newQueryParams, _id: getRandomId() }));\r\n    }\r\n    \r\n\r\n    toggleRow(noticeId: number) {\r\n        this.expandedMap[noticeId] = !this.expandedMap[noticeId];\r\n    }\r\n\r\n    isRowExpanded(noticeId: number): boolean {\r\n        return this.expandedMap[noticeId];\r\n    }\r\n          \r\n\r\n\r\n    ngOnInit(): void {this.noticeData$ = this.store.select(selectNoticeData).pipe(startWith(this.route.snapshot.data.NoticeData));\r\n        this.noticeData$.pipe(\r\n            filter(data => !!data)\r\n        ).subscribe((data) => {\r\n            this.totalRecords$ = this.noticeData$.pipe(map((x) => (x ? (x[0] ? x[0].count : 0) : 0)));\r\n        });\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.filtersSub?.unsubscribe();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}