{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./officesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./officesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { selectOfficesData } from \"src/app/redux/offices/offices.selectors\";\nimport { of } from \"rxjs/internal/observable/of\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { getRandomId } from \"src/app/redux/actions\";\nimport { addOfficesData } from \"src/app/redux/offices/offices.actions\";\nlet OfficesManagementComponent = class OfficesManagementComponent {\n  get selectedNoticeData() {\n    return this._selectedNoticeData;\n  }\n  set selectedNoticeData(value) {\n    this._selectedNoticeData = value;\n  }\n  constructor(store, router, route) {\n    this.store = store;\n    this.router = router;\n    this.route = route;\n    this.officeData$ = of([]);\n    this.editedOffices = {};\n    this.office = {\n      officesName: '',\n      officesCapacity: null,\n      userId: null\n    };\n    this.officesType = [{\n      officesType: \"Ufficio standard\"\n    }, {\n      officesType: \"Sala riunioni\"\n    }, {\n      officesType: \"Sala ristoro\"\n    }, {\n      officesType: \"Ufficio amministrativo\"\n    }, {\n      officesType: \"Ufficio dirigenti\"\n    }];\n    this.selectedType = null;\n    //used to blocking some offices for only some user\n    this.usersId = [{\n      usersId: \"Utente 1\"\n    }, {\n      usersId: \"Utente 2\"\n    }, {\n      usersId: \"Utente 3\"\n    }];\n    this.selectedUsers = [];\n    this.showAddForm = true;\n    this.successAdd = false;\n    this.successUpdate = false;\n    this.lastSearch$ = of(null);\n    this.noticeDataFilters$ = of({});\n    this.totalRecords$ = of(0);\n    this.globalFiltersFields = Object.keys(this.notification);\n    this.filtersSubj$ = new Subject();\n    this._firstQuery = true;\n    this.officeData$ = store.select(selectOfficesData);\n    this.noticeData$.subscribe(data => {\n      if (data) {\n        data.forEach(notice => {\n          this.expandedMap[notice.noticeId] = false;\n        });\n      }\n    });\n    this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\n    this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\n    this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe(a => this.store.dispatch(a));\n    this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map(f => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\n  }\n  //add officeData\n  addOffice(form) {\n    if (this.selectedType) {\n      this.office.officesType = this.selectedType.officesType;\n    }\n    if (this.selectedUsers.length > 0) {\n      const selectedUsersIds = this.selectedUsers.map(user => user.usersId);\n      const usersIdAsString = selectedUsersIds.join(\", \");\n      this.office.userId = usersIdAsString;\n    }\n    console.log(this.office);\n    this.store.dispatch(addOfficesData({\n      item: this.office,\n      _id: getRandomId()\n    }));\n    this.resetFormFields(form);\n    this.successAdd = true;\n    this.successUpdate = false;\n  }\n  resetFormFields(form) {\n    form.resetForm();\n    this.office = {\n      officesName: '',\n      officesCapacity: 1\n    };\n    this.selectedType = null;\n    this.selectedUsers = [];\n  }\n  //delete officeData\n  //update officeData\n  ngOnInit() {}\n  ngOnDestroy() {}\n};\nOfficesManagementComponent.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\nOfficesManagementComponent = __decorate([Component({\n  selector: \"app-officesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OfficesManagementComponent);\nexport { OfficesManagementComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","selectOfficesData","of","ActivatedRoute","Router","getRandomId","addOfficesData","OfficesManagementComponent","selectedNoticeData","_selectedNoticeData","value","constructor","store","router","route","officesName","officesCapacity","userId","officesType","usersId","Object","keys","notification","Subject","officeData$","select","noticeData$","subscribe","data","forEach","notice","expandedMap","noticeId","isLoading$","selectIsLoading","pipe","distinctUntilChanged","noticeDataFilters$","selectNoticeDataFilters","filtersSub","filtersSubj$","asObservable","debounceTime","a","dispatch","lastSearch$","take","map","f","filtering","length","addOffice","form","selectedType","office","selectedUsers","selectedUsersIds","user","usersIdAsString","join","console","log","item","_id","resetFormFields","successAdd","successUpdate","resetForm","ngOnInit","ngOnDestroy","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\officesManagement\\officesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AppState} from \"src/app/redux/state\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\n\r\nimport {OfficesData} from \"src/app/redux/offices/offices.state\";\r\nimport { selectOfficesData } from \"src/app/redux/offices/offices.selectors\";\r\n\r\nimport { environment } from \"src/environments/environment\";\r\nimport { of } from \"rxjs/internal/observable/of\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Observable, firstValueFrom} from \"rxjs\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { addOfficesData } from \"src/app/redux/offices/offices.actions\";\r\n\r\n@Component({\r\n    selector: \"app-officesManagement\",\r\n    templateUrl: \"./officesManagement.component.html\",\r\n    styleUrls: [\"./officesManagement.component.scss\"],\r\n})\r\n\r\nexport class OfficesManagementComponent  implements OnInit, OnDestroy{ \r\n\r\n    officeData$: Observable<OfficesData[]> = of([]);\r\n\r\n    public editedOffices: Partial<OfficesData> = {};\r\n\r\n    office: Partial<OfficesData> = {\r\n        officesName : '',\r\n        officesCapacity : null,  \r\n        userId: null,\r\n    };\r\n\r\n    officesType: any = [ \r\n        { officesType: \"Ufficio standard\" },\r\n        { officesType: \"Sala riunioni\" },\r\n        { officesType: \"Sala ristoro\" },\r\n        { officesType: \"Ufficio amministrativo\" },\r\n        { officesType: \"Ufficio dirigenti\" },\r\n    ];\r\n    \r\n    selectedType: any = null;\r\n\r\n    //used to blocking some offices for only some user\r\n    usersId: any[] = [  //to fill with keyclock users VIP or Amministrazione\r\n        { usersId: \"Utente 1\" },\r\n        { usersId: \"Utente 2\" },\r\n        { usersId: \"Utente 3\" },\r\n    ];\r\n\r\n    selectedUsers: any[] = [];\r\n\r\n    showAddForm = true;\r\n    successAdd: boolean = false;\r\n    successUpdate: boolean = false;\r\n\r\n    lastSearch$: Observable<string> = of(null);\r\n    noticeDataFilters$: Observable<DynamicQueryPart> = of({});\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n    globalFiltersFields = Object.keys(this.notification);\r\n    filtersSubj$ = new Subject<Action>();\r\n    filtersSub: Subscription;\r\n\r\n    private _firstQuery: boolean = true;\r\n    private _selectedNoticeData: NoticeData;\r\n    get selectedNoticeData() {\r\n        return this._selectedNoticeData;\r\n    }\r\n    set selectedNoticeData(value: NoticeData) {\r\n        this._selectedNoticeData = value;\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n        this.officeData$ = store.select(selectOfficesData);\r\n        this.noticeData$.subscribe((data) => {\r\n            if(data) { data.forEach((notice) => {this.expandedMap[notice.noticeId] = false; });} });\r\n        this.isLoading$ = store.select(selectIsLoading).pipe(distinctUntilChanged());\r\n        this.noticeDataFilters$ = store.select(selectNoticeDataFilters);\r\n        this.filtersSub = this.filtersSubj$.asObservable().pipe(debounceTime(1000)).subscribe((a) => this.store.dispatch(a));\r\n        this.lastSearch$ = store.select(selectNoticeDataFilters).pipe(take(1), map((f) => f.filtering && f.filtering.length > 0 ? f.filtering[0].value : \"\"));\r\n        \r\n    }\r\n\r\n    //add officeData\r\n    addOffice(form: NgForm) {\r\n        if(this.selectedType) {\r\n            this.office.officesType = this.selectedType.officesType;\r\n        }\r\n        if (this.selectedUsers.length > 0) {\r\n            const selectedUsersIds: string[] = this.selectedUsers.map((user) => user.usersId);\r\n            const usersIdAsString: string = selectedUsersIds.join(\", \");\r\n            this.office.userId = usersIdAsString;\r\n        }\r\n\r\n        console.log(this.office);\r\n        this.store.dispatch( addOfficesData({ item: this.office, _id: getRandomId() }) );\r\n    \r\n        this.resetFormFields(form);\r\n        this.successAdd = true;\r\n        this.successUpdate = false;\r\n    }\r\n\r\n    resetFormFields(form: NgForm) {\r\n        form.resetForm();\r\n        this.office = {\r\n            officesName : '',\r\n            officesCapacity : 1,\r\n        };\r\n        this.selectedType = null;\r\n        this.selectedUsers = []\r\n    }\r\n\r\n \r\n    //delete officeData\r\n\r\n    //update officeData\r\n\r\n\r\n\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}