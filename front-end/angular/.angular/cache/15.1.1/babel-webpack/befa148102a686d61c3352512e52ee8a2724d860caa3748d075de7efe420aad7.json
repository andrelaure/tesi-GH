{"ast":null,"code":"import { createAction, props } from '@ngrx/store';\nexport function isErrorAction(a) {\n  return a['error'] !== undefined && typeof a['error'] === 'string' && a.type !== handleMessage.type && a.type !== showMessage.type;\n}\nexport function isSuccessActionToShow(a) {\n  return a['successMessage'] !== undefined && a['successMessage'] !== null && typeof a['successMessage'] === 'string' && a['successMessage'] !== '';\n}\nexport const showMessage = createAction('[Messages] Show Message', props());\nexport const handleMessage = createAction('[Messages] Handle Message', props());","map":{"version":3,"mappings":"AAAA,SAAiBA,YAAY,EAAEC,KAAK,QAAQ,aAAa;AAczD,OAAM,SAAUC,aAAa,CAACC,CAAS;EACnC,OAAOA,CAAC,CAAC,OAAO,CAAC,KAAKC,SAAS,IAC3B,OAAOD,CAAC,CAAC,OAAO,CAAE,KAAK,QAAQ,IAC/BA,CAAC,CAACE,IAAI,KAAKC,aAAa,CAACD,IAAI,IAC7BF,CAAC,CAACE,IAAI,KAAKE,WAAW,CAACF,IAAI;AACnC;AAEA,OAAM,SAAUG,qBAAqB,CAACL,CAAS;EAC3C,OAAOA,CAAC,CAAC,gBAAgB,CAAC,KAAKC,SAAS,IACpCD,CAAC,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAC5B,OAAOA,CAAC,CAAC,gBAAgB,CAAE,KAAK,QAAQ,IACxCA,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE;AAClC;AAEA,OAAO,MAAMI,WAAW,GAAGP,YAAY,CAAC,yBAAyB,EAAEC,KAAK,EAA2B,CAAC;AACpG,OAAO,MAAMK,aAAa,GAAGN,YAAY,CAAC,2BAA2B,EAAEC,KAAK,EAAkB,CAAC","names":["createAction","props","isErrorAction","a","undefined","type","handleMessage","showMessage","isSuccessActionToShow"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\redux\\message\\message.actions.ts"],"sourcesContent":["import { Action, createAction, props } from '@ngrx/store';\r\nimport { AppMessage } from './message.state';\r\n\r\nexport interface ErrorPayload {\r\n    error: string;\r\n}\r\n\r\nexport interface SuccessMessage {\r\n    successMessage?: string\r\n}\r\nexport type SuccessPayload<T> = {\r\n    [P in keyof T]?: T[P];\r\n  } & SuccessMessage\r\n\r\nexport function isErrorAction(a: Action): a is Action & ErrorPayload {\r\n    return a['error'] !== undefined &&\r\n        typeof(a['error']) === 'string' &&\r\n        a.type !== handleMessage.type &&\r\n        a.type !== showMessage.type;\r\n}\r\n\r\nexport function isSuccessActionToShow(a: Action): a is Action & SuccessMessage {\r\n    return a['successMessage'] !== undefined &&\r\n        a['successMessage'] !== null &&\r\n        typeof(a['successMessage']) === 'string' &&\r\n        a['successMessage'] !== '';\r\n}\r\n\r\nexport const showMessage = createAction('[Messages] Show Message', props<{ message: AppMessage }>());\r\nexport const handleMessage = createAction('[Messages] Handle Message', props<{ id: number }>());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}