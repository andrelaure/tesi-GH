{"ast":null,"code":"/*import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { firstValueFrom, Observable, of, Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, map, startWith, take } from \"rxjs/operators\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\n\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { SampleData } from \"src/app/redux/sample/sample.state\";\r\nimport { selectSampleData, selectSampleDataFilters } from \"src/app/redux/sample/sample.selectors\";\r\nimport { changeSampleDataFilters } from \"src/app/redux/sample/sample.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-notice\",\r\n    templateUrl: \"./notice.component.html\",\r\n    styleUrls: [\"./notice.component.scss\"],\r\n})\r\n\r\nexport class NoticeComponent implements OnInit{ //onDestroy\r\n    lastSearch$: Observable<string> = of(null);\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void {}\r\n}\r\n*/","map":{"version":3,"mappings":"AAAA","names":[],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\notice\\notice.component.ts"],"sourcesContent":["/*import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { firstValueFrom, Observable, of, Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, map, startWith, take } from \"rxjs/operators\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\n\r\n\r\nimport { AppState, DynamicQueryPart, Filtering } from \"src/app/redux/state\";\r\nimport { getRandomId } from \"src/app/redux/actions\";\r\nimport { selectIsLoading } from \"src/app/redux/awaiter/awaiter.selectors\";\r\nimport { SampleData } from \"src/app/redux/sample/sample.state\";\r\nimport { selectSampleData, selectSampleDataFilters } from \"src/app/redux/sample/sample.selectors\";\r\nimport { changeSampleDataFilters } from \"src/app/redux/sample/sample.actions\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-notice\",\r\n    templateUrl: \"./notice.component.html\",\r\n    styleUrls: [\"./notice.component.scss\"],\r\n})\r\n\r\nexport class NoticeComponent implements OnInit{ //onDestroy\r\n    lastSearch$: Observable<string> = of(null);\r\n    isLoading$: Observable<boolean>;\r\n    totalRecords$: Observable<number> = of(0);\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private route: ActivatedRoute\r\n    ){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void {}\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}