{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { CustomOAuthService } from \"../services/custom-oauth.service\";\nlet AdminUserGuard = class AdminUserGuard {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n  }\n  canActivate(route, state) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const isAdminUser = yield this.oauthService.isAdminUser();\n      if (!isAdminUser) {\n        console.error(\"You should be 'admin-user' to activate this route!\");\n      }\n      return isAdminUser;\n    });\n  }\n};\nAdminUserGuard.ctorParameters = () => [{\n  type: CustomOAuthService\n}];\nAdminUserGuard = __decorate([Injectable({\n  providedIn: \"any\"\n})], AdminUserGuard);\nexport { AdminUserGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,kBAAkB,QAAQ,kCAAkC;AAG9D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACvBC,YAAoBC,YAAgC;IAAhC,iBAAY,GAAZA,YAAY;EAAuB;EAEjDC,WAAW,CACbC,KAA6B,EAC7BC,KAA0B;;MAE1B,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACI,WAAW,EAAE;MACzD,IAAI,CAACA,WAAW,EAAE;QACdC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;;MAEvE,OAAOF,WAAW;IACtB,CAAC;;;;;;AAZQN,cAAc,eAD1BF,UAAU,CAAC;EAAEW,UAAU,EAAE;AAAK,CAAE,CAAC,GACrBT,cAAc,CAa1B;SAbYA,cAAc","names":["Injectable","CustomOAuthService","AdminUserGuard","constructor","oauthService","canActivate","route","state","isAdminUser","console","error","providedIn"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\guards\\admin-user.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { CustomOAuthService } from \"../services/custom-oauth.service\";\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class AdminUserGuard implements CanActivate {\r\n    constructor(private oauthService: CustomOAuthService) {}\r\n\r\n    async canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): Promise<boolean | UrlTree> {\r\n        const isAdminUser = await this.oauthService.isAdminUser();\r\n        if (!isAdminUser) {\r\n            console.error(\"You should be 'admin-user' to activate this route!\");\r\n        }\r\n        return isAdminUser;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}