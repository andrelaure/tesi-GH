{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./message.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./message.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { MessageService } from 'primeng/api';\nimport { Store } from '@ngrx/store';\nimport { selectMessageToShow } from '../../redux/message/message.selectors';\nimport { isEmpty, from } from './../../utils';\nimport { handleMessage } from './../../redux/message/message.actions';\nlet MessageComponent = class MessageComponent {\n  constructor(pMessageService, store) {\n    this.pMessageService = pMessageService;\n    this.store = store;\n    this.sub = store.select(selectMessageToShow).pipe(map(m => from(m)), filter(m => !isEmpty(m)), distinctUntilChanged((e1, e2) => (e1 === null || e1 === void 0 ? void 0 : e1.value.id) === (e2 === null || e2 === void 0 ? void 0 : e2.value.id))).subscribe(full => {\n      this.pMessageService.add({\n        severity: full.value.severity,\n        id: full.value.id,\n        summary: full.value.severity,\n        detail: full.value.message\n      });\n    });\n  }\n  onMessageClose(event) {\n    this.store.dispatch(handleMessage({\n      id: event.message.id\n    }));\n  }\n  ngOnDestroy() {\n    var _a;\n    (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n};\nMessageComponent.ctorParameters = () => [{\n  type: MessageService\n}, {\n  type: Store\n}];\nMessageComponent = __decorate([Component({\n  selector: 'app-custom-message',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MessageComponent);\nexport { MessageComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAAmB,eAAe;AAEpD,SAASC,oBAAoB,EAAEC,MAAM,EAAEC,GAAG,QAAa,gBAAgB;AACvE,SAASC,cAAc,QAAQ,aAAa;AAE5C,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,SAASC,aAAa,QAAQ,uCAAuC;AAO9D,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAIzBC,YACYC,eAA+B,EAC/BC,KAAsB;IADtB,oBAAe,GAAfD,eAAe;IACf,UAAK,GAALC,KAAK;IACb,IAAI,CAACC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAACT,mBAAmB,CAAC,CAACU,IAAI,CAC7Cb,GAAG,CAACc,CAAC,IAAIT,IAAI,CAACS,CAAC,CAAC,CAAC,EACjBf,MAAM,CAACe,CAAC,IAAI,CAACV,OAAO,CAACU,CAAC,CAAC,CAAC,EACxBhB,oBAAoB,CAAC,CAACiB,EAAE,EAAEC,EAAE,KAAK,GAAE,aAAFD,EAAE,uBAAFA,EAAE,CAAEE,KAAK,CAACC,EAAE,OAAKF,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEC,KAAK,CAACC,EAAE,EAAC,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MAClF,IAAI,CAACX,eAAe,CAACY,GAAG,CAAC;QACrBC,QAAQ,EAAEF,IAAI,CAACH,KAAK,CAACK,QAAQ;QAC7BJ,EAAE,EAAEE,IAAI,CAACH,KAAK,CAACC,EAAE;QACjBK,OAAO,EAAEH,IAAI,CAACH,KAAK,CAACK,QAAQ;QAC5BE,MAAM,EAAEJ,IAAI,CAACH,KAAK,CAACQ;OACtB,CAAC;IACN,CAAC,CAAC;EACN;EAEAC,cAAc,CAACC,KAAU;IACrB,IAAI,CAACjB,KAAK,CAACkB,QAAQ,CAACtB,aAAa,CAAC;MAAEY,EAAE,EAAES,KAAK,CAACF,OAAO,CAACP;IAAE,CAAC,CAAC,CAAC;EAC/D;EAEAW,WAAW;;IACP,UAAI,CAAClB,GAAG,0CAAEmB,WAAW,EAAE;EAC3B;;;;;;;AA1BSvB,gBAAgB,eAL5BV,SAAS,CAAC;EACTkC,QAAQ,EAAE,oBAAoB;EAC9BC,8BAAqC;;CAEtC,CAAC,GACWzB,gBAAgB,CA2B5B;SA3BYA,gBAAgB","names":["Component","distinctUntilChanged","filter","map","MessageService","Store","selectMessageToShow","isEmpty","from","handleMessage","MessageComponent","constructor","pMessageService","store","sub","select","pipe","m","e1","e2","value","id","subscribe","full","add","severity","summary","detail","message","onMessageClose","event","dispatch","ngOnDestroy","unsubscribe","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\message\\message.component.ts"],"sourcesContent":["import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\r\nimport { MessageService } from 'primeng/api';\r\nimport { AppState } from './../../redux/state';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectMessageToShow } from '../../redux/message/message.selectors';\r\nimport { isEmpty, from } from './../../utils';\r\nimport { handleMessage } from './../../redux/message/message.actions'\r\n\r\n@Component({\r\n  selector: 'app-custom-message',\r\n  templateUrl: \"message.component.html\",\r\n  styleUrls: [\"message.component.scss\"]\r\n})\r\nexport class MessageComponent implements OnDestroy {\r\n\r\n    private sub: Subscription;\r\n\r\n    constructor(\r\n        private pMessageService: MessageService,\r\n        private store: Store<AppState>) {\r\n        this.sub = store.select(selectMessageToShow).pipe(\r\n            map(m => from(m)),\r\n            filter(m => !isEmpty(m)),\r\n            distinctUntilChanged((e1, e2) => e1?.value.id === e2?.value.id)).subscribe(full => {\r\n            this.pMessageService.add({\r\n                severity: full.value.severity,\r\n                id: full.value.id,\r\n                summary: full.value.severity,\r\n                detail: full.value.message\r\n            });\r\n        });\r\n    }\r\n\r\n    onMessageClose(event: any) {\r\n        this.store.dispatch(handleMessage({ id: event.message.id}))\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.sub?.unsubscribe();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}