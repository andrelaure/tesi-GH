{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, NgZone } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { skipWhile, take } from \"rxjs/operators\";\nimport { searchNoticeData } from \"../redux/notice/notice.actions\";\nimport { selectNoticeData, selectNoticeDataFilters } from \"../redux/notice/notice.selectors\";\nimport { environment } from \"../../environments/environment\";\nlet NoticeResolver = class NoticeResolver {\n  constructor(store, zone) {\n    this.store = store;\n    this.zone = zone;\n  }\n  resolve(route, state) {\n    const rand = Math.floor(Math.random() * 1000000).toFixed();\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        this.store.select(selectNoticeDataFilters).pipe(take(1)).subscribe(storedDqp => {\n          this.store.dispatch(searchNoticeData({\n            _id: rand,\n            queryParams: {\n              filtering: storedDqp.filtering ? storedDqp.filtering : [],\n              paging: storedDqp.paging ? storedDqp.paging : {\n                skip: 0,\n                take: environment.defaultNumberOfRowsPerPage\n              },\n              ordering: storedDqp.ordering ? storedDqp.ordering : [{\n                column: \"noticeId\",\n                columnPrefix: \"\",\n                descending: false\n              }]\n            }\n          }));\n        });\n      });\n    });\n    return this.store.select(selectNoticeData).pipe(skipWhile(s => s._id !== rand), take(1));\n  }\n};\nNoticeResolver.ctorParameters = () => [{\n  type: Store\n}, {\n  type: NgZone\n}];\nNoticeResolver = __decorate([Injectable({\n  providedIn: \"root\"\n})], NoticeResolver);\nexport { NoticeResolver };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,eAAe;AAElD,SAASC,KAAK,QAAQ,aAAa;AAEnC,SAASC,SAAS,EAAEC,IAAI,QAAQ,gBAAgB;AAChD,SAASC,gBAAgB,QAAQ,gCAAgC;AAGjE,SAASC,gBAAgB,EAAEC,uBAAuB,QAAQ,kCAAkC;AAC5F,SAASC,WAAW,QAAQ,gCAAgC;AAGrD,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACvBC,YACYC,KAAsB,EACtBC,IAAY;IADZ,UAAK,GAALD,KAAK;IACL,SAAI,GAAJC,IAAI;EACb;EAEHC,OAAO,CACHC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,OAAS,CAAC,CAACC,OAAO,EAAE;IAC5D,IAAI,CAACR,IAAI,CAACS,iBAAiB,CAAC,MAAK;MAC7BC,UAAU,CAAC,MAAK;QACZ,IAAI,CAACX,KAAK,CAACY,MAAM,CAAChB,uBAAuB,CAAC,CAACiB,IAAI,CAACpB,IAAI,CAAC,CAAC,CAAC,CAAC,CAACqB,SAAS,CAAEC,SAAS,IAAI;UAC7E,IAAI,CAACf,KAAK,CAACgB,QAAQ,CACftB,gBAAgB,CAAC;YACbuB,GAAG,EAAEZ,IAAI;YACTa,WAAW,EAAE;cACTC,SAAS,EAAEJ,SAAS,CAACI,SAAS,GAAGJ,SAAS,CAACI,SAAS,GAAG,EAAE;cACzDC,MAAM,EAAEL,SAAS,CAACK,MAAM,GAAGL,SAAS,CAACK,MAAM,GAAG;gBAAEC,IAAI,EAAE,CAAC;gBAAE5B,IAAI,EAAEI,WAAW,CAACyB;cAA0B,CAAE;cACvGC,QAAQ,EAAER,SAAS,CAACQ,QAAQ,GAAGR,SAAS,CAACQ,QAAQ,GAAG,CAAC;gBAAEC,MAAM,EAAE,UAAU;gBAAEC,YAAY,EAAE,EAAE;gBAAEC,UAAU,EAAE;cAAK,CAAE;;WAEvH,CAAC,CACL;QACL,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1B,KAAK,CAACY,MAAM,CAACjB,gBAAgB,CAAC,CAACkB,IAAI,CAC3CrB,SAAS,CAAEmC,CAAC,IAAKA,CAAC,CAACV,GAAG,KAAKZ,IAAI,CAAC,EAChCZ,IAAI,CAAC,CAAC,CAAC,CACV;EACL;;;;;;;AA/BSK,cAAc,eAD1BT,UAAU,CAAC;EAAEuC,UAAU,EAAE;AAAM,CAAE,CAAC,GACtB9B,cAAc,CAgC1B;SAhCYA,cAAc","names":["Injectable","NgZone","Store","skipWhile","take","searchNoticeData","selectNoticeData","selectNoticeDataFilters","environment","NoticeResolver","constructor","store","zone","resolve","route","state","rand","Math","floor","random","toFixed","runOutsideAngular","setTimeout","select","pipe","subscribe","storedDqp","dispatch","_id","queryParams","filtering","paging","skip","defaultNumberOfRowsPerPage","ordering","column","columnPrefix","descending","s","providedIn"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\resolvers\\notice.resolver.ts"],"sourcesContent":["import { Injectable, NgZone } from \"@angular/core\";\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { skipWhile, take } from \"rxjs/operators\";\r\nimport { searchNoticeData } from \"../redux/notice/notice.actions\";\r\nimport { NoticeData } from \"../redux/notice/notice.state\";\r\nimport { AppState } from \"../redux/state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"../redux/notice/notice.selectors\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class NoticeResolver implements Resolve<NoticeData[]> {\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    resolve(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): Observable<NoticeData[]> | Promise<NoticeData[]> | NoticeData[] {\r\n        const rand = Math.floor(Math.random() * 1_000_000).toFixed();\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this.store.select(selectNoticeDataFilters).pipe(take(1)).subscribe((storedDqp) => {\r\n                    this.store.dispatch(\r\n                        searchNoticeData({\r\n                            _id: rand,\r\n                            queryParams: {\r\n                                filtering: storedDqp.filtering ? storedDqp.filtering : [],\r\n                                paging: storedDqp.paging ? storedDqp.paging : { skip: 0, take: environment.defaultNumberOfRowsPerPage },\r\n                                ordering: storedDqp.ordering ? storedDqp.ordering : [{ column: \"noticeId\", columnPrefix: \"\", descending: false }],\r\n                            },\r\n                        })\r\n                    );\r\n                });\r\n            });\r\n        });\r\n        return this.store.select(selectNoticeData).pipe(\r\n            skipWhile((s) => s._id !== rand),\r\n            take(1)\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}