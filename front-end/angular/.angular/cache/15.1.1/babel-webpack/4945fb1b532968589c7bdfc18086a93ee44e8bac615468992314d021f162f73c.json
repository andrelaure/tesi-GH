{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./noticesManagement.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./noticesManagement.component.scss?ngResource\";\nimport { Component } from \"@angular/core\";\n/*import {MatSelectModule} from '@angular/material/select';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonModule} from '@angular/material/button';*/\nimport { of } from \"rxjs\";\nimport { FormControl, Validators } from \"@angular/forms\";\nlet NoticesManagementComponent = class NoticesManagementComponent {\n  constructor() {\n    this.title = new FormControl('', [Validators.required]);\n    this.description = new FormControl('', [Validators.required]);\n    this.text = new FormControl('', [Validators.required]);\n    this.noticeData$ = of([]);\n  }\n  getErrorMessage() {\n    if (this.title.hasError('required')) {\n      return \"Il campo 'Titolo' è obbligatorio\";\n    }\n    if (this.description.hasError('required')) {\n      return \"Il campo 'Oggetto' è obbligatorio\";\n    }\n    if (this.text.hasError('required')) {\n      return \"Il campo 'Descrizione' è obbligatorio\";\n    }\n  }\n  addNotice() {}\n  deleteNotice() {\n    // onCascade a tutti quelli a cui è stata inviata\n  }\n};\nNoticesManagementComponent = __decorate([Component({\n  selector: \"app-noticesManagement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NoticesManagementComponent);\nexport { NoticesManagementComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAA2B,eAAe;AAE5D;;;;;AAMA,SAAqBC,EAAE,QAAQ,MAAM;AAIrC,SAASC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAUjD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAAhCC;IAEH,UAAK,GAAG,IAAIH,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACG,QAAQ,CAAC,CAAC;IAClD,gBAAW,GAAG,IAAIJ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACG,QAAQ,CAAC,CAAC;IACxD,SAAI,GAAG,IAAIJ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACG,QAAQ,CAAC,CAAC;IACjD,gBAAW,GAA6BL,EAAE,CAAC,EAAE,CAAC;EAsBlD;EApBIM,eAAe;IACX,IAAI,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;MACnC,OAAO,kCAAkC;;IAE3C,IAAI,IAAI,CAACC,WAAW,CAACD,QAAQ,CAAC,UAAU,CAAC,EAAE;MACvC,OAAO,mCAAmC;;IAE9C,IAAI,IAAI,CAACE,IAAI,CAACF,QAAQ,CAAC,UAAU,CAAC,EAAE;MAChC,OAAO,uCAAuC;;EAEtD;EAEAG,SAAS,IAET;EAEAC,YAAY;IACR;EAAA;CAGP;AA3BYT,0BAA0B,eAPtCJ,SAAS,CAAC;EACPc,QAAQ,EAAE,uBAAuB;EACjCC,8BAAiD;;CAGpD,CAAC,GAEWX,0BAA0B,CA2BtC;SA3BYA,0BAA0B","names":["Component","of","FormControl","Validators","NoticesManagementComponent","constructor","required","getErrorMessage","title","hasError","description","text","addNotice","deleteNotice","selector","template"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\components\\admin\\noticesManagement\\noticesManagement.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { NgIf } from \"@angular/common\";\r\n/*import {MatSelectModule} from '@angular/material/select';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonModule} from '@angular/material/button';*/\r\n\r\nimport { Observable, of } from \"rxjs\";\r\n\r\nimport { NoticeData } from \"src/app/redux/notice/notice.state\";\r\nimport { selectNoticeData, selectNoticeDataFilters } from \"src/app/redux/notice/notice.selectors\";\r\nimport { FormControl, Validators } from \"@angular/forms\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-noticesManagement\",\r\n    templateUrl: \"./noticesManagement.component.html\",\r\n    styleUrls: [\"./noticesManagement.component.scss\"],\r\n    //imports: [MatFormFieldModule, MatInputModule, MatSelectModule, MatDividerModule, MatButtonModule],\r\n})\r\n\r\nexport class NoticesManagementComponent  { \r\n\r\n    title = new FormControl('', [Validators.required]);\r\n    description = new FormControl('', [Validators.required]);\r\n    text = new FormControl('', [Validators.required]);\r\n    noticeData$: Observable<NoticeData[]> = of([]);\r\n\r\n    getErrorMessage() {\r\n        if (this.title.hasError('required')) {\r\n          return \"Il campo 'Titolo' è obbligatorio\";\r\n        }\r\n        if (this.description.hasError('required')) {\r\n            return \"Il campo 'Oggetto' è obbligatorio\";\r\n        }\r\n        if (this.text.hasError('required')) {\r\n            return \"Il campo 'Descrizione' è obbligatorio\";\r\n        }\r\n    }\r\n\r\n    addNotice(){\r\n\r\n    }\r\n\r\n    deleteNotice(){\r\n        // onCascade a tutti quelli a cui è stata inviata\r\n    }\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}