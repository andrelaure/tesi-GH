{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { OAuthService } from \"angular-oauth2-oidc\";\nimport jwt_decode from \"jwt-decode\";\nimport { environment } from \"src/environments/environment\";\nlet CustomOAuthService = class CustomOAuthService {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n  }\n  isAuthenticated() {\n    return this.oauthService.hasValidAccessToken();\n  }\n  accessToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      while (!this.oauthService.hasValidAccessToken()) {\n        yield this.delay(100);\n      }\n      return this.oauthService.getAccessToken();\n    });\n  }\n  delay(millisenconds) {\n    return new Promise(resolve => setTimeout(resolve, millisenconds));\n  }\n  userName() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = yield this.accessToken();\n      const token = jwt_decode(accessToken);\n      this.username = token.preferred_username;\n      if ((token.family_name === \"\" || token.family_name === undefined) && (token.given_name === \"\" || token.given_name === undefined)) {\n        return token.preferred_username !== \"\" ? token.preferred_username : \"###\";\n      }\n      const userName = token.family_name + \" \" + token.given_name;\n      return userName;\n    });\n  }\n  isGuestUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (environment.onlyDesignMode) {\n        return true;\n      }\n      const accessToken = yield this.accessToken();\n      const token = jwt_decode(accessToken);\n      const roles = token.realm_access.roles;\n      return roles === null || roles === void 0 ? void 0 : roles.some(r => r === \"guest-user\" || r === \"base-user\" || r === \"vip-user\" || r === \"admin-user\");\n    });\n  }\n  isBaseUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = yield this.accessToken();\n      const token = jwt_decode(accessToken);\n      const roles = token.realm_access.roles;\n      return roles === null || roles === void 0 ? void 0 : roles.some(r => r === \"base-user\" || r === \"vip-user\" || r === \"admin-user\");\n    });\n  }\n  isVipUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = yield this.accessToken();\n      const token = jwt_decode(accessToken);\n      const roles = token.realm_access.roles;\n      return roles === null || roles === void 0 ? void 0 : roles.some(r => r === \"vip-user\" || r === \"admin-user\");\n    });\n  }\n  isAdminUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = yield this.accessToken();\n      const token = jwt_decode(accessToken);\n      const roles = token.realm_access.roles;\n      return roles === null || roles === void 0 ? void 0 : roles.some(r => r === \"admin-user\");\n    });\n  }\n  login() {\n    const config = environment.authConfig;\n    this.oauthService.configure(config);\n    this.oauthService.setupAutomaticSilentRefresh();\n    if (!this.oauthService.hasValidAccessToken()) {\n      this.oauthService.loadDiscoveryDocumentAndLogin({\n        customHashFragment: window.location.search\n      });\n    }\n  }\n  logout() {\n    this.oauthService.refreshToken().then(_ => {\n      this.oauthService.logOut();\n    }, r => console.error(r));\n  }\n};\nCustomOAuthService.ctorParameters = () => [{\n  type: OAuthService\n}];\nCustomOAuthService = __decorate([Injectable({\n  providedIn: \"root\"\n})], CustomOAuthService);\nexport { CustomOAuthService };","map":{"version":3,"mappings":"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","names":["Injectable","OAuthService","jwt_decode","environment","CustomOAuthService","constructor","oauthService","isAuthenticated","hasValidAccessToken","accessToken","delay","getAccessToken","millisenconds","Promise","resolve","setTimeout","userName","token","username","preferred_username","family_name","undefined","given_name","isGuestUser","onlyDesignMode","roles","realm_access","some","r","isBaseUser","isVipUser","isAdminUser","login","config","authConfig","configure","setupAutomaticSilentRefresh","loadDiscoveryDocumentAndLogin","customHashFragment","window","location","search","logout","refreshToken","then","_","logOut","console","error","providedIn"],"sourceRoot":"","sources":["C:\\Users\\andrea\\Desktop\\TESI\\SIGLA\\tesi\\tesi-andrea-lauretta\\front-end\\angular\\src\\app\\services\\custom-oauth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { AuthConfig, OAuthService } from \"angular-oauth2-oidc\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\ninterface TokenUserInfo {\r\n    family_name: string;\r\n    preferred_username: string;\r\n    given_name: string;\r\n    email: string;\r\n    realm_access: { roles: string[] };\r\n}\r\n\r\nexport interface UserInfo {\r\n    username: string;\r\n    email: string;\r\n    roles: string[];\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class CustomOAuthService {\r\n    public username: string;\r\n\r\n    constructor(private oauthService: OAuthService) {}\r\n\r\n    public isAuthenticated() {\r\n        return this.oauthService.hasValidAccessToken();\r\n    }\r\n\r\n    public async accessToken() {\r\n        while (!this.oauthService.hasValidAccessToken()) {\r\n            await this.delay(100);\r\n        }\r\n        return this.oauthService.getAccessToken();\r\n    }\r\n\r\n    private delay(millisenconds: number): Promise<void> {\r\n        return new Promise((resolve) => setTimeout(resolve, millisenconds));\r\n    }\r\n\r\n    public async userName() {\r\n        const accessToken = await this.accessToken();\r\n        const token = jwt_decode(accessToken) as TokenUserInfo;\r\n        this.username = token.preferred_username;\r\n        if (\r\n            (token.family_name === \"\" || token.family_name === undefined) &&\r\n            (token.given_name === \"\" || token.given_name === undefined)\r\n        ) {\r\n            return token.preferred_username !== \"\"\r\n                ? token.preferred_username\r\n                : \"###\";\r\n        }\r\n        const userName = token.family_name + \" \" + token.given_name;\r\n        return userName;\r\n    }\r\n\r\n    public async isGuestUser() {\r\n        if (environment.onlyDesignMode) {\r\n            return true;\r\n        }\r\n        const accessToken = await this.accessToken();\r\n        const token = jwt_decode(accessToken) as TokenUserInfo;\r\n        const roles = token.realm_access.roles;\r\n        return roles?.some((r) => r === \"guest-user\" || r === \"base-user\" || r === \"vip-user\" || r === \"admin-user\");\r\n    }\r\n\r\n    public async isBaseUser() {\r\n        const accessToken = await this.accessToken();\r\n        const token = jwt_decode(accessToken) as TokenUserInfo;\r\n        const roles = token.realm_access.roles;\r\n        return roles?.some((r) => r === \"base-user\" || r === \"vip-user\" || r === \"admin-user\");\r\n    }\r\n\r\n    public async isVipUser() {\r\n        const accessToken = await this.accessToken();\r\n        const token = jwt_decode(accessToken) as TokenUserInfo;\r\n        const roles = token.realm_access.roles;\r\n        return roles?.some((r) => r === \"vip-user\" || r === \"admin-user\");\r\n    }\r\n\r\n    public async isAdminUser() {\r\n        const accessToken = await this.accessToken();\r\n        const token = jwt_decode(accessToken) as TokenUserInfo;\r\n        const roles = token.realm_access.roles;\r\n        return roles?.some((r) => r === \"admin-user\");\r\n    }\r\n\r\n    public login() {\r\n        const config = environment.authConfig as AuthConfig;\r\n        this.oauthService.configure(config);\r\n        this.oauthService.setupAutomaticSilentRefresh();\r\n        if (!this.oauthService.hasValidAccessToken()) {\r\n            this.oauthService.loadDiscoveryDocumentAndLogin({\r\n                customHashFragment: window.location.search,\r\n            });\r\n        }\r\n    }\r\n\r\n    public logout() {\r\n        this.oauthService.refreshToken().then((_) => {\r\n                this.oauthService.logOut();\r\n            },\r\n            (r) => console.error(r)\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}