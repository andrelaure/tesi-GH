{"ast":null,"code":"(function (root, factory) {\n  // Hack to make all exports of this module sha256 function object properties.\n  var exports = {};\n  factory(exports);\n  var sha256 = exports[\"default\"];\n  for (var k in exports) {\n    sha256[k] = exports[k];\n  }\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = sha256;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return sha256;\n    });\n  } else {\n    root.sha256 = sha256;\n  }\n})(this, function (exports) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  // SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n  //\n  // Written in 2014-2016 by Dmitry Chestnykh.\n  // Public domain, no warranty.\n  //\n  // Functions (accept and return Uint8Arrays):\n  //\n  //   sha256(message) -> hash\n  //   sha256.hmac(key, message) -> mac\n  //   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n  //\n  //  Classes:\n  //\n  //   new sha256.Hash()\n  //   new sha256.HMAC(key)\n  //\n  exports.digestLength = 32;\n  exports.blockSize = 64;\n  // SHA-256 constants\n  var K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n  function hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n      a = v[0];\n      b = v[1];\n      c = v[2];\n      d = v[3];\n      e = v[4];\n      f = v[5];\n      g = v[6];\n      h = v[7];\n      for (i = 0; i < 16; i++) {\n        j = pos + i * 4;\n        w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n      }\n      for (i = 16; i < 64; i++) {\n        u = w[i - 2];\n        t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n        u = w[i - 15];\n        t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n        w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n      }\n      for (i = 0; i < 64; i++) {\n        t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n        t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n      v[0] += a;\n      v[1] += b;\n      v[2] += c;\n      v[3] += d;\n      v[4] += e;\n      v[5] += f;\n      v[6] += g;\n      v[7] += h;\n      pos += 64;\n      len -= 64;\n    }\n    return pos;\n  }\n  // Hash implements SHA256 hash algorithm.\n  var Hash = /** @class */function () {\n    function Hash() {\n      this.digestLength = exports.digestLength;\n      this.blockSize = exports.blockSize;\n      // Note: Int32Array is used instead of Uint32Array for performance reasons.\n      this.state = new Int32Array(8); // hash state\n      this.temp = new Int32Array(64); // temporary state\n      this.buffer = new Uint8Array(128); // buffer for data to hash\n      this.bufferLength = 0; // number of bytes in buffer\n      this.bytesHashed = 0; // number of total bytes hashed\n      this.finished = false; // indicates whether the hash was finalized\n      this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    Hash.prototype.reset = function () {\n      this.state[0] = 0x6a09e667;\n      this.state[1] = 0xbb67ae85;\n      this.state[2] = 0x3c6ef372;\n      this.state[3] = 0xa54ff53a;\n      this.state[4] = 0x510e527f;\n      this.state[5] = 0x9b05688c;\n      this.state[6] = 0x1f83d9ab;\n      this.state[7] = 0x5be0cd19;\n      this.bufferLength = 0;\n      this.bytesHashed = 0;\n      this.finished = false;\n      return this;\n    };\n    // Cleans internal buffers and re-initializes hash state.\n    Hash.prototype.clean = function () {\n      for (var i = 0; i < this.buffer.length; i++) {\n        this.buffer[i] = 0;\n      }\n      for (var i = 0; i < this.temp.length; i++) {\n        this.temp[i] = 0;\n      }\n      this.reset();\n    };\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    Hash.prototype.update = function (data, dataLength) {\n      if (dataLength === void 0) {\n        dataLength = data.length;\n      }\n      if (this.finished) {\n        throw new Error(\"SHA256: can't update because hash was finished.\");\n      }\n      var dataPos = 0;\n      this.bytesHashed += dataLength;\n      if (this.bufferLength > 0) {\n        while (this.bufferLength < 64 && dataLength > 0) {\n          this.buffer[this.bufferLength++] = data[dataPos++];\n          dataLength--;\n        }\n        if (this.bufferLength === 64) {\n          hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n          this.bufferLength = 0;\n        }\n      }\n      if (dataLength >= 64) {\n        dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n        dataLength %= 64;\n      }\n      while (dataLength > 0) {\n        this.buffer[this.bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n      return this;\n    };\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    Hash.prototype.finish = function (out) {\n      if (!this.finished) {\n        var bytesHashed = this.bytesHashed;\n        var left = this.bufferLength;\n        var bitLenHi = bytesHashed / 0x20000000 | 0;\n        var bitLenLo = bytesHashed << 3;\n        var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n        this.buffer[left] = 0x80;\n        for (var i = left + 1; i < padLength - 8; i++) {\n          this.buffer[i] = 0;\n        }\n        this.buffer[padLength - 8] = bitLenHi >>> 24 & 0xff;\n        this.buffer[padLength - 7] = bitLenHi >>> 16 & 0xff;\n        this.buffer[padLength - 6] = bitLenHi >>> 8 & 0xff;\n        this.buffer[padLength - 5] = bitLenHi >>> 0 & 0xff;\n        this.buffer[padLength - 4] = bitLenLo >>> 24 & 0xff;\n        this.buffer[padLength - 3] = bitLenLo >>> 16 & 0xff;\n        this.buffer[padLength - 2] = bitLenLo >>> 8 & 0xff;\n        this.buffer[padLength - 1] = bitLenLo >>> 0 & 0xff;\n        hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n        this.finished = true;\n      }\n      for (var i = 0; i < 8; i++) {\n        out[i * 4 + 0] = this.state[i] >>> 24 & 0xff;\n        out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n        out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n        out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n      }\n      return this;\n    };\n    // Returns the final hash digest.\n    Hash.prototype.digest = function () {\n      var out = new Uint8Array(this.digestLength);\n      this.finish(out);\n      return out;\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._saveState = function (out) {\n      for (var i = 0; i < this.state.length; i++) {\n        out[i] = this.state[i];\n      }\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n      for (var i = 0; i < this.state.length; i++) {\n        this.state[i] = from[i];\n      }\n      this.bytesHashed = bytesHashed;\n      this.finished = false;\n      this.bufferLength = 0;\n    };\n    return Hash;\n  }();\n  exports.Hash = Hash;\n  // HMAC implements HMAC-SHA256 message authentication algorithm.\n  var HMAC = /** @class */function () {\n    function HMAC(key) {\n      this.inner = new Hash();\n      this.outer = new Hash();\n      this.blockSize = this.inner.blockSize;\n      this.digestLength = this.inner.digestLength;\n      var pad = new Uint8Array(this.blockSize);\n      if (key.length > this.blockSize) {\n        new Hash().update(key).finish(pad).clean();\n      } else {\n        for (var i = 0; i < key.length; i++) {\n          pad[i] = key[i];\n        }\n      }\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] ^= 0x36;\n      }\n      this.inner.update(pad);\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] ^= 0x36 ^ 0x5c;\n      }\n      this.outer.update(pad);\n      this.istate = new Uint32Array(8);\n      this.ostate = new Uint32Array(8);\n      this.inner._saveState(this.istate);\n      this.outer._saveState(this.ostate);\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] = 0;\n      }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    HMAC.prototype.reset = function () {\n      this.inner._restoreState(this.istate, this.inner.blockSize);\n      this.outer._restoreState(this.ostate, this.outer.blockSize);\n      return this;\n    };\n    // Cleans HMAC state.\n    HMAC.prototype.clean = function () {\n      for (var i = 0; i < this.istate.length; i++) {\n        this.ostate[i] = this.istate[i] = 0;\n      }\n      this.inner.clean();\n      this.outer.clean();\n    };\n    // Updates state with provided data.\n    HMAC.prototype.update = function (data) {\n      this.inner.update(data);\n      return this;\n    };\n    // Finalizes HMAC and puts the result in out.\n    HMAC.prototype.finish = function (out) {\n      if (this.outer.finished) {\n        this.outer.finish(out);\n      } else {\n        this.inner.finish(out);\n        this.outer.update(out, this.digestLength).finish(out);\n      }\n      return this;\n    };\n    // Returns message authentication code.\n    HMAC.prototype.digest = function () {\n      var out = new Uint8Array(this.digestLength);\n      this.finish(out);\n      return out;\n    };\n    return HMAC;\n  }();\n  exports.HMAC = HMAC;\n  // Returns SHA256 hash of data.\n  function hash(data) {\n    var h = new Hash().update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n  }\n  exports.hash = hash;\n  // Function hash is both available as module.hash and as default export.\n  exports[\"default\"] = hash;\n  // Returns HMAC-SHA256 of data under the key.\n  function hmac(key, data) {\n    var h = new HMAC(key).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n  }\n  exports.hmac = hmac;\n  // Fills hkdf buffer like this:\n  // T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\n  function fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n    if (num === 0) {\n      throw new Error(\"hkdf: cannot expand more\");\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n      hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n      hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n  }\n  var hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\n  function hkdf(key, salt, info, length) {\n    if (salt === void 0) {\n      salt = hkdfSalt;\n    }\n    if (length === void 0) {\n      length = 32;\n    }\n    var counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    var okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    var hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      if (bufpos === buffer.length) {\n        fillBuffer(buffer, hmac_, info, counter);\n        bufpos = 0;\n      }\n      out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n  }\n  exports.hkdf = hkdf;\n  // Derives a key from password and salt using PBKDF2-HMAC-SHA256\n  // with the given number of iterations.\n  //\n  // The number of bytes returned is equal to dkLen.\n  //\n  // (For better security, avoid dkLen greater than hash length - 32 bytes).\n  function pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n    for (var i = 0; i * len < dkLen; i++) {\n      var c = i + 1;\n      ctr[0] = c >>> 24 & 0xff;\n      ctr[1] = c >>> 16 & 0xff;\n      ctr[2] = c >>> 8 & 0xff;\n      ctr[3] = c >>> 0 & 0xff;\n      prf.reset();\n      prf.update(salt);\n      prf.update(ctr);\n      prf.finish(u);\n      for (var j = 0; j < len; j++) {\n        t[j] = u[j];\n      }\n      for (var j = 2; j <= iterations; j++) {\n        prf.reset();\n        prf.update(u).finish(u);\n        for (var k = 0; k < len; k++) {\n          t[k] ^= u[k];\n        }\n      }\n      for (var j = 0; j < len && i * len + j < dkLen; j++) {\n        dk[i * len + j] = t[j];\n      }\n    }\n    for (var i = 0; i < len; i++) {\n      t[i] = u[i] = 0;\n    }\n    for (var i = 0; i < 4; i++) {\n      ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n  }\n  exports.pbkdf2 = pbkdf2;\n});","map":{"version":3,"names":["root","factory","exports","sha256","k","module","define","amd","__esModule","digestLength","blockSize","K","Uint32Array","hashBlocks","w","v","p","pos","len","a","b","c","d","e","f","g","h","u","i","j","t1","t2","Hash","state","Int32Array","temp","buffer","Uint8Array","bufferLength","bytesHashed","finished","reset","prototype","clean","length","update","data","dataLength","Error","dataPos","finish","out","left","bitLenHi","bitLenLo","padLength","digest","_saveState","_restoreState","from","HMAC","key","inner","outer","pad","istate","ostate","hash","hmac","fillBuffer","info","counter","num","hkdfSalt","hkdf","salt","okm","hmac_","bufpos","fill","pbkdf2","password","iterations","dkLen","prf","ctr","t","dk"],"sources":["C:/Users/andrea/Desktop/TESI/SIGLA/tesi/tesi-andrea-lauretta/front-end/angular/node_modules/fast-sha256/sha256.js"],"sourcesContent":["(function (root, factory) {\n    // Hack to make all exports of this module sha256 function object properties.\n    var exports = {};\n    factory(exports);\n    var sha256 = exports[\"default\"];\n    for (var k in exports) {\n        sha256[k] = exports[k];\n    }\n        \n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = sha256;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() { return sha256; }); \n    } else {\n        root.sha256 = sha256;\n    }\n})(this, function(exports) {\n\"use strict\";\nexports.__esModule = true;\n// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexports.digestLength = 32;\nexports.blockSize = 64;\n// SHA-256 constants\nvar K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n        for (i = 0; i < 16; i++) {\n            j = pos + i * 4;\n            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));\n        }\n        for (i = 16; i < 64; i++) {\n            u = w[i - 2];\n            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (i = 0; i < 64; i++) {\n            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n// Hash implements SHA256 hash algorithm.\nvar Hash = /** @class */ (function () {\n    function Hash() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this.state = new Int32Array(8); // hash state\n        this.temp = new Int32Array(64); // temporary state\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n        this.bufferLength = 0; // number of bytes in buffer\n        this.bytesHashed = 0; // number of total bytes hashed\n        this.finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    Hash.prototype.reset = function () {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n    };\n    // Cleans internal buffers and re-initializes hash state.\n    Hash.prototype.clean = function () {\n        for (var i = 0; i < this.buffer.length; i++) {\n            this.buffer[i] = 0;\n        }\n        for (var i = 0; i < this.temp.length; i++) {\n            this.temp[i] = 0;\n        }\n        this.reset();\n    };\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    Hash.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this.finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this.bytesHashed += dataLength;\n        if (this.bufferLength > 0) {\n            while (this.bufferLength < 64 && dataLength > 0) {\n                this.buffer[this.bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this.bufferLength === 64) {\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n                this.bufferLength = 0;\n            }\n        }\n        if (dataLength >= 64) {\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n            dataLength %= 64;\n        }\n        while (dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    Hash.prototype.finish = function (out) {\n        if (!this.finished) {\n            var bytesHashed = this.bytesHashed;\n            var left = this.bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this.buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this.buffer[i] = 0;\n            }\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n            this.finished = true;\n        }\n        for (var i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return this;\n    };\n    // Returns the final hash digest.\n    Hash.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._saveState = function (out) {\n        for (var i = 0; i < this.state.length; i++) {\n            out[i] = this.state[i];\n        }\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n        for (var i = 0; i < this.state.length; i++) {\n            this.state[i] = from[i];\n        }\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n    };\n    return Hash;\n}());\nexports.Hash = Hash;\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nvar HMAC = /** @class */ (function () {\n    function HMAC(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            (new Hash()).update(key).finish(pad).clean();\n        }\n        else {\n            for (var i = 0; i < key.length; i++) {\n                pad[i] = key[i];\n            }\n        }\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        this.inner.update(pad);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n        this.inner._saveState(this.istate);\n        this.outer._saveState(this.ostate);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] = 0;\n        }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    HMAC.prototype.reset = function () {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n        return this;\n    };\n    // Cleans HMAC state.\n    HMAC.prototype.clean = function () {\n        for (var i = 0; i < this.istate.length; i++) {\n            this.ostate[i] = this.istate[i] = 0;\n        }\n        this.inner.clean();\n        this.outer.clean();\n    };\n    // Updates state with provided data.\n    HMAC.prototype.update = function (data) {\n        this.inner.update(data);\n        return this;\n    };\n    // Finalizes HMAC and puts the result in out.\n    HMAC.prototype.finish = function (out) {\n        if (this.outer.finished) {\n            this.outer.finish(out);\n        }\n        else {\n            this.inner.finish(out);\n            this.outer.update(out, this.digestLength).finish(out);\n        }\n        return this;\n    };\n    // Returns message authentication code.\n    HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    return HMAC;\n}());\nexports.HMAC = HMAC;\n// Returns SHA256 hash of data.\nfunction hash(data) {\n    var h = (new Hash()).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n// Function hash is both available as module.hash and as default export.\nexports[\"default\"] = hash;\n// Returns HMAC-SHA256 of data under the key.\nfunction hmac(key, data) {\n    var h = (new HMAC(key)).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n    if (num === 0) {\n        throw new Error(\"hkdf: cannot expand more\");\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n        hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n        hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n}\nvar hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\nfunction hkdf(key, salt, info, length) {\n    if (salt === void 0) { salt = hkdfSalt; }\n    if (length === void 0) { length = 32; }\n    var counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    var okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    var hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n            fillBuffer(buffer, hmac_, info, counter);\n            bufpos = 0;\n        }\n        out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n}\nexports.hkdf = hkdf;\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nfunction pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n    for (var i = 0; i * len < dkLen; i++) {\n        var c = i + 1;\n        ctr[0] = (c >>> 24) & 0xff;\n        ctr[1] = (c >>> 16) & 0xff;\n        ctr[2] = (c >>> 8) & 0xff;\n        ctr[3] = (c >>> 0) & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n        for (var j = 0; j < len; j++) {\n            t[j] = u[j];\n        }\n        for (var j = 2; j <= iterations; j++) {\n            prf.reset();\n            prf.update(u).finish(u);\n            for (var k = 0; k < len; k++) {\n                t[k] ^= u[k];\n            }\n        }\n        for (var j = 0; j < len && i * len + j < dkLen; j++) {\n            dk[i * len + j] = t[j];\n        }\n    }\n    for (var i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n    }\n    for (var i = 0; i < 4; i++) {\n        ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n}\nexports.pbkdf2 = pbkdf2;\n});\n"],"mappings":"AAAA,CAAC,UAAUA,IAAI,EAAEC,OAAO,EAAE;EACtB;EACA,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChBD,OAAO,CAACC,OAAO,CAAC;EAChB,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;EAC/B,KAAK,IAAIE,CAAC,IAAIF,OAAO,EAAE;IACnBC,MAAM,CAACC,CAAC,CAAC,GAAGF,OAAO,CAACE,CAAC,CAAC;EAC1B;EAEA,IAAI,OAAOC,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACH,OAAO,KAAK,QAAQ,EAAE;IAClEG,MAAM,CAACH,OAAO,GAAGC,MAAM;EAC3B,CAAC,MAAM,IAAI,OAAOG,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IACnDD,MAAM,CAAC,YAAW;MAAE,OAAOH,MAAM;IAAE,CAAC,CAAC;EACzC,CAAC,MAAM;IACHH,IAAI,CAACG,MAAM,GAAGA,MAAM;EACxB;AACJ,CAAC,EAAE,IAAI,EAAE,UAASD,OAAO,EAAE;EAC3B,YAAY;;EACZA,OAAO,CAACM,UAAU,GAAG,IAAI;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAN,OAAO,CAACO,YAAY,GAAG,EAAE;EACzBP,OAAO,CAACQ,SAAS,GAAG,EAAE;EACtB;EACA,IAAIC,CAAC,GAAG,IAAIC,WAAW,CAAC,CACpjD,CAAC;EACF,SAASC,UAAU,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAE;IACnC,IAAIC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE;IAC3C,OAAOb,GAAG,IAAI,EAAE,EAAE;MACdC,CAAC,GAAGJ,CAAC,CAAC,CAAC,CAAC;MACRK,CAAC,GAAGL,CAAC,CAAC,CAAC,CAAC;MACRM,CAAC,GAAGN,CAAC,CAAC,CAAC,CAAC;MACRO,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC;MACRQ,CAAC,GAAGR,CAAC,CAAC,CAAC,CAAC;MACRS,CAAC,GAAGT,CAAC,CAAC,CAAC,CAAC;MACRU,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;MACRW,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAC;MACR,KAAKa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACrBC,CAAC,GAAGZ,GAAG,GAAGW,CAAC,GAAG,CAAC;QACfd,CAAC,CAACc,CAAC,CAAC,GAAK,CAACZ,CAAC,CAACa,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAAK,CAACb,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAG,GACpD,CAACb,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAE,GAAIb,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAG,IAAM;MACrD;MACA,KAAKD,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACtBD,CAAC,GAAGb,CAAC,CAACc,CAAC,GAAG,CAAC,CAAC;QACZE,EAAE,GAAG,CAACH,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,KAAKA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,GAAIA,CAAC,KAAK,EAAG;QAC3EA,CAAC,GAAGb,CAAC,CAACc,CAAC,GAAG,EAAE,CAAC;QACbG,EAAE,GAAG,CAACJ,CAAC,KAAK,CAAC,GAAGA,CAAC,IAAK,EAAE,GAAG,CAAE,KAAKA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,GAAIA,CAAC,KAAK,CAAE;QACxEb,CAAC,CAACc,CAAC,CAAC,GAAG,CAACE,EAAE,GAAGhB,CAAC,CAACc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAKG,EAAE,GAAGjB,CAAC,CAACc,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;MACrD;MACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACrBE,EAAE,GAAI,CAAE,CAAC,CAACP,CAAC,KAAK,CAAC,GAAGA,CAAC,IAAK,EAAE,GAAG,CAAE,KAAKA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,IAC3DA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,KAAMA,CAAC,GAAGC,CAAC,GAAK,CAACD,CAAC,GAAGE,CAAE,CAAC,GAAI,CAAC,KACtDC,CAAC,IAAKf,CAAC,CAACiB,CAAC,CAAC,GAAGd,CAAC,CAACc,CAAC,CAAC,GAAI,CAAC,CAAC,GAAI,CAAC,CAAC,GAAI,CAAC;QACxCG,EAAE,GAAI,CAAC,CAACZ,CAAC,KAAK,CAAC,GAAGA,CAAC,IAAK,EAAE,GAAG,CAAE,KAAKA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,IACzDA,CAAC,KAAK,EAAE,GAAGA,CAAC,IAAK,EAAE,GAAG,EAAG,CAAC,KAAMA,CAAC,GAAGC,CAAC,GAAKD,CAAC,GAAGE,CAAE,GAAID,CAAC,GAAGC,CAAE,CAAC,GAAI,CAAC;QACrEK,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAID,CAAC,GAAGQ,EAAE,GAAI,CAAC;QAChBR,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAGD,CAAC;QACLA,CAAC,GAAIW,EAAE,GAAGC,EAAE,GAAI,CAAC;MACrB;MACAhB,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC;MACTJ,CAAC,CAAC,CAAC,CAAC,IAAIK,CAAC;MACTL,CAAC,CAAC,CAAC,CAAC,IAAIM,CAAC;MACTN,CAAC,CAAC,CAAC,CAAC,IAAIO,CAAC;MACTP,CAAC,CAAC,CAAC,CAAC,IAAIQ,CAAC;MACTR,CAAC,CAAC,CAAC,CAAC,IAAIS,CAAC;MACTT,CAAC,CAAC,CAAC,CAAC,IAAIU,CAAC;MACTV,CAAC,CAAC,CAAC,CAAC,IAAIW,CAAC;MACTT,GAAG,IAAI,EAAE;MACTC,GAAG,IAAI,EAAE;IACb;IACA,OAAOD,GAAG;EACd;EACA;EACA,IAAIe,IAAI,GAAG,aAAe,YAAY;IAClC,SAASA,IAAI,GAAG;MACZ,IAAI,CAACvB,YAAY,GAAGP,OAAO,CAACO,YAAY;MACxC,IAAI,CAACC,SAAS,GAAGR,OAAO,CAACQ,SAAS;MAClC;MACA,IAAI,CAACuB,KAAK,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MAChC,IAAI,CAACC,IAAI,GAAG,IAAID,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAChC,IAAI,CAACE,MAAM,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;MACnC,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC,CAAC;MACvB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;MACtB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC,CAAC;MACvB,IAAI,CAACC,KAAK,EAAE;IAChB;IACA;IACA;IACAT,IAAI,CAACU,SAAS,CAACD,KAAK,GAAG,YAAY;MAC/B,IAAI,CAACR,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;MAC1B,IAAI,CAACK,YAAY,GAAG,CAAC;MACrB,IAAI,CAACC,WAAW,GAAG,CAAC;MACpB,IAAI,CAACC,QAAQ,GAAG,KAAK;MACrB,OAAO,IAAI;IACf,CAAC;IACD;IACAR,IAAI,CAACU,SAAS,CAACC,KAAK,GAAG,YAAY;MAC/B,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACQ,MAAM,CAACQ,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACzC,IAAI,CAACQ,MAAM,CAACR,CAAC,CAAC,GAAG,CAAC;MACtB;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACO,IAAI,CAACS,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACvC,IAAI,CAACO,IAAI,CAACP,CAAC,CAAC,GAAG,CAAC;MACpB;MACA,IAAI,CAACa,KAAK,EAAE;IAChB,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACAT,IAAI,CAACU,SAAS,CAACG,MAAM,GAAG,UAAUC,IAAI,EAAEC,UAAU,EAAE;MAChD,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;QAAEA,UAAU,GAAGD,IAAI,CAACF,MAAM;MAAE;MACvD,IAAI,IAAI,CAACJ,QAAQ,EAAE;QACf,MAAM,IAAIQ,KAAK,CAAC,iDAAiD,CAAC;MACtE;MACA,IAAIC,OAAO,GAAG,CAAC;MACf,IAAI,CAACV,WAAW,IAAIQ,UAAU;MAC9B,IAAI,IAAI,CAACT,YAAY,GAAG,CAAC,EAAE;QACvB,OAAO,IAAI,CAACA,YAAY,GAAG,EAAE,IAAIS,UAAU,GAAG,CAAC,EAAE;UAC7C,IAAI,CAACX,MAAM,CAAC,IAAI,CAACE,YAAY,EAAE,CAAC,GAAGQ,IAAI,CAACG,OAAO,EAAE,CAAC;UAClDF,UAAU,EAAE;QAChB;QACA,IAAI,IAAI,CAACT,YAAY,KAAK,EAAE,EAAE;UAC1BzB,UAAU,CAAC,IAAI,CAACsB,IAAI,EAAE,IAAI,CAACF,KAAK,EAAE,IAAI,CAACG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;UACrD,IAAI,CAACE,YAAY,GAAG,CAAC;QACzB;MACJ;MACA,IAAIS,UAAU,IAAI,EAAE,EAAE;QAClBE,OAAO,GAAGpC,UAAU,CAAC,IAAI,CAACsB,IAAI,EAAE,IAAI,CAACF,KAAK,EAAEa,IAAI,EAAEG,OAAO,EAAEF,UAAU,CAAC;QACtEA,UAAU,IAAI,EAAE;MACpB;MACA,OAAOA,UAAU,GAAG,CAAC,EAAE;QACnB,IAAI,CAACX,MAAM,CAAC,IAAI,CAACE,YAAY,EAAE,CAAC,GAAGQ,IAAI,CAACG,OAAO,EAAE,CAAC;QAClDF,UAAU,EAAE;MAChB;MACA,OAAO,IAAI;IACf,CAAC;IACD;IACA;IACA;IACAf,IAAI,CAACU,SAAS,CAACQ,MAAM,GAAG,UAAUC,GAAG,EAAE;MACnC,IAAI,CAAC,IAAI,CAACX,QAAQ,EAAE;QAChB,IAAID,WAAW,GAAG,IAAI,CAACA,WAAW;QAClC,IAAIa,IAAI,GAAG,IAAI,CAACd,YAAY;QAC5B,IAAIe,QAAQ,GAAId,WAAW,GAAG,UAAU,GAAI,CAAC;QAC7C,IAAIe,QAAQ,GAAGf,WAAW,IAAI,CAAC;QAC/B,IAAIgB,SAAS,GAAIhB,WAAW,GAAG,EAAE,GAAG,EAAE,GAAI,EAAE,GAAG,GAAG;QAClD,IAAI,CAACH,MAAM,CAACgB,IAAI,CAAC,GAAG,IAAI;QACxB,KAAK,IAAIxB,CAAC,GAAGwB,IAAI,GAAG,CAAC,EAAExB,CAAC,GAAG2B,SAAS,GAAG,CAAC,EAAE3B,CAAC,EAAE,EAAE;UAC3C,IAAI,CAACQ,MAAM,CAACR,CAAC,CAAC,GAAG,CAAC;QACtB;QACA,IAAI,CAACQ,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAIF,QAAQ,KAAK,EAAE,GAAI,IAAI;QACrD,IAAI,CAACjB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAIF,QAAQ,KAAK,EAAE,GAAI,IAAI;QACrD,IAAI,CAACjB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAIF,QAAQ,KAAK,CAAC,GAAI,IAAI;QACpD,IAAI,CAACjB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAIF,QAAQ,KAAK,CAAC,GAAI,IAAI;QACpD,IAAI,CAACjB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAID,QAAQ,KAAK,EAAE,GAAI,IAAI;QACrD,IAAI,CAAClB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAID,QAAQ,KAAK,EAAE,GAAI,IAAI;QACrD,IAAI,CAAClB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAID,QAAQ,KAAK,CAAC,GAAI,IAAI;QACpD,IAAI,CAAClB,MAAM,CAACmB,SAAS,GAAG,CAAC,CAAC,GAAID,QAAQ,KAAK,CAAC,GAAI,IAAI;QACpDzC,UAAU,CAAC,IAAI,CAACsB,IAAI,EAAE,IAAI,CAACF,KAAK,EAAE,IAAI,CAACG,MAAM,EAAE,CAAC,EAAEmB,SAAS,CAAC;QAC5D,IAAI,CAACf,QAAQ,GAAG,IAAI;MACxB;MACA,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxBuB,GAAG,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,KAAK,EAAE,GAAI,IAAI;QAC9CuB,GAAG,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,KAAK,EAAE,GAAI,IAAI;QAC9CuB,GAAG,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI;QAC7CuB,GAAG,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI;MACjD;MACA,OAAO,IAAI;IACf,CAAC;IACD;IACAI,IAAI,CAACU,SAAS,CAACc,MAAM,GAAG,YAAY;MAChC,IAAIL,GAAG,GAAG,IAAId,UAAU,CAAC,IAAI,CAAC5B,YAAY,CAAC;MAC3C,IAAI,CAACyC,MAAM,CAACC,GAAG,CAAC;MAChB,OAAOA,GAAG;IACd,CAAC;IACD;IACAnB,IAAI,CAACU,SAAS,CAACe,UAAU,GAAG,UAAUN,GAAG,EAAE;MACvC,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,KAAK,CAACW,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACxCuB,GAAG,CAACvB,CAAC,CAAC,GAAG,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC;MAC1B;IACJ,CAAC;IACD;IACAI,IAAI,CAACU,SAAS,CAACgB,aAAa,GAAG,UAAUC,IAAI,EAAEpB,WAAW,EAAE;MACxD,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,KAAK,CAACW,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACxC,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,GAAG+B,IAAI,CAAC/B,CAAC,CAAC;MAC3B;MACA,IAAI,CAACW,WAAW,GAAGA,WAAW;MAC9B,IAAI,CAACC,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACF,YAAY,GAAG,CAAC;IACzB,CAAC;IACD,OAAON,IAAI;EACf,CAAC,EAAG;EACJ9B,OAAO,CAAC8B,IAAI,GAAGA,IAAI;EACnB;EACA,IAAI4B,IAAI,GAAG,aAAe,YAAY;IAClC,SAASA,IAAI,CAACC,GAAG,EAAE;MACf,IAAI,CAACC,KAAK,GAAG,IAAI9B,IAAI,EAAE;MACvB,IAAI,CAAC+B,KAAK,GAAG,IAAI/B,IAAI,EAAE;MACvB,IAAI,CAACtB,SAAS,GAAG,IAAI,CAACoD,KAAK,CAACpD,SAAS;MACrC,IAAI,CAACD,YAAY,GAAG,IAAI,CAACqD,KAAK,CAACrD,YAAY;MAC3C,IAAIuD,GAAG,GAAG,IAAI3B,UAAU,CAAC,IAAI,CAAC3B,SAAS,CAAC;MACxC,IAAImD,GAAG,CAACjB,MAAM,GAAG,IAAI,CAAClC,SAAS,EAAE;QAC5B,IAAIsB,IAAI,EAAE,CAAEa,MAAM,CAACgB,GAAG,CAAC,CAACX,MAAM,CAACc,GAAG,CAAC,CAACrB,KAAK,EAAE;MAChD,CAAC,MACI;QACD,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,GAAG,CAACjB,MAAM,EAAEhB,CAAC,EAAE,EAAE;UACjCoC,GAAG,CAACpC,CAAC,CAAC,GAAGiC,GAAG,CAACjC,CAAC,CAAC;QACnB;MACJ;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,GAAG,CAACpB,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACjCoC,GAAG,CAACpC,CAAC,CAAC,IAAI,IAAI;MAClB;MACA,IAAI,CAACkC,KAAK,CAACjB,MAAM,CAACmB,GAAG,CAAC;MACtB,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,GAAG,CAACpB,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACjCoC,GAAG,CAACpC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI;MACzB;MACA,IAAI,CAACmC,KAAK,CAAClB,MAAM,CAACmB,GAAG,CAAC;MACtB,IAAI,CAACC,MAAM,GAAG,IAAIrD,WAAW,CAAC,CAAC,CAAC;MAChC,IAAI,CAACsD,MAAM,GAAG,IAAItD,WAAW,CAAC,CAAC,CAAC;MAChC,IAAI,CAACkD,KAAK,CAACL,UAAU,CAAC,IAAI,CAACQ,MAAM,CAAC;MAClC,IAAI,CAACF,KAAK,CAACN,UAAU,CAAC,IAAI,CAACS,MAAM,CAAC;MAClC,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,GAAG,CAACpB,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACjCoC,GAAG,CAACpC,CAAC,CAAC,GAAG,CAAC;MACd;IACJ;IACA;IACA;IACA;IACAgC,IAAI,CAAClB,SAAS,CAACD,KAAK,GAAG,YAAY;MAC/B,IAAI,CAACqB,KAAK,CAACJ,aAAa,CAAC,IAAI,CAACO,MAAM,EAAE,IAAI,CAACH,KAAK,CAACpD,SAAS,CAAC;MAC3D,IAAI,CAACqD,KAAK,CAACL,aAAa,CAAC,IAAI,CAACQ,MAAM,EAAE,IAAI,CAACH,KAAK,CAACrD,SAAS,CAAC;MAC3D,OAAO,IAAI;IACf,CAAC;IACD;IACAkD,IAAI,CAAClB,SAAS,CAACC,KAAK,GAAG,YAAY;MAC/B,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqC,MAAM,CAACrB,MAAM,EAAEhB,CAAC,EAAE,EAAE;QACzC,IAAI,CAACsC,MAAM,CAACtC,CAAC,CAAC,GAAG,IAAI,CAACqC,MAAM,CAACrC,CAAC,CAAC,GAAG,CAAC;MACvC;MACA,IAAI,CAACkC,KAAK,CAACnB,KAAK,EAAE;MAClB,IAAI,CAACoB,KAAK,CAACpB,KAAK,EAAE;IACtB,CAAC;IACD;IACAiB,IAAI,CAAClB,SAAS,CAACG,MAAM,GAAG,UAAUC,IAAI,EAAE;MACpC,IAAI,CAACgB,KAAK,CAACjB,MAAM,CAACC,IAAI,CAAC;MACvB,OAAO,IAAI;IACf,CAAC;IACD;IACAc,IAAI,CAAClB,SAAS,CAACQ,MAAM,GAAG,UAAUC,GAAG,EAAE;MACnC,IAAI,IAAI,CAACY,KAAK,CAACvB,QAAQ,EAAE;QACrB,IAAI,CAACuB,KAAK,CAACb,MAAM,CAACC,GAAG,CAAC;MAC1B,CAAC,MACI;QACD,IAAI,CAACW,KAAK,CAACZ,MAAM,CAACC,GAAG,CAAC;QACtB,IAAI,CAACY,KAAK,CAAClB,MAAM,CAACM,GAAG,EAAE,IAAI,CAAC1C,YAAY,CAAC,CAACyC,MAAM,CAACC,GAAG,CAAC;MACzD;MACA,OAAO,IAAI;IACf,CAAC;IACD;IACAS,IAAI,CAAClB,SAAS,CAACc,MAAM,GAAG,YAAY;MAChC,IAAIL,GAAG,GAAG,IAAId,UAAU,CAAC,IAAI,CAAC5B,YAAY,CAAC;MAC3C,IAAI,CAACyC,MAAM,CAACC,GAAG,CAAC;MAChB,OAAOA,GAAG;IACd,CAAC;IACD,OAAOS,IAAI;EACf,CAAC,EAAG;EACJ1D,OAAO,CAAC0D,IAAI,GAAGA,IAAI;EACnB;EACA,SAASO,IAAI,CAACrB,IAAI,EAAE;IAChB,IAAIpB,CAAC,GAAI,IAAIM,IAAI,EAAE,CAAEa,MAAM,CAACC,IAAI,CAAC;IACjC,IAAIU,MAAM,GAAG9B,CAAC,CAAC8B,MAAM,EAAE;IACvB9B,CAAC,CAACiB,KAAK,EAAE;IACT,OAAOa,MAAM;EACjB;EACAtD,OAAO,CAACiE,IAAI,GAAGA,IAAI;EACnB;EACAjE,OAAO,CAAC,SAAS,CAAC,GAAGiE,IAAI;EACzB;EACA,SAASC,IAAI,CAACP,GAAG,EAAEf,IAAI,EAAE;IACrB,IAAIpB,CAAC,GAAI,IAAIkC,IAAI,CAACC,GAAG,CAAC,CAAEhB,MAAM,CAACC,IAAI,CAAC;IACpC,IAAIU,MAAM,GAAG9B,CAAC,CAAC8B,MAAM,EAAE;IACvB9B,CAAC,CAACiB,KAAK,EAAE;IACT,OAAOa,MAAM;EACjB;EACAtD,OAAO,CAACkE,IAAI,GAAGA,IAAI;EACnB;EACA;EACA,SAASC,UAAU,CAACjC,MAAM,EAAEgC,IAAI,EAAEE,IAAI,EAAEC,OAAO,EAAE;IAC7C;IACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,CAAC,CAAC;IACpB,IAAIC,GAAG,KAAK,CAAC,EAAE;MACX,MAAM,IAAIxB,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IACA;IACAoB,IAAI,CAAC3B,KAAK,EAAE;IACZ;IACA;IACA,IAAI+B,GAAG,GAAG,CAAC,EAAE;MACTJ,IAAI,CAACvB,MAAM,CAACT,MAAM,CAAC;IACvB;IACA;IACA,IAAIkC,IAAI,EAAE;MACNF,IAAI,CAACvB,MAAM,CAACyB,IAAI,CAAC;IACrB;IACA;IACAF,IAAI,CAACvB,MAAM,CAAC0B,OAAO,CAAC;IACpB;IACAH,IAAI,CAAClB,MAAM,CAACd,MAAM,CAAC;IACnB;IACAmC,OAAO,CAAC,CAAC,CAAC,EAAE;EAChB;EACA,IAAIE,QAAQ,GAAG,IAAIpC,UAAU,CAACnC,OAAO,CAACO,YAAY,CAAC,CAAC,CAAC;EACrD,SAASiE,IAAI,CAACb,GAAG,EAAEc,IAAI,EAAEL,IAAI,EAAE1B,MAAM,EAAE;IACnC,IAAI+B,IAAI,KAAK,KAAK,CAAC,EAAE;MAAEA,IAAI,GAAGF,QAAQ;IAAE;IACxC,IAAI7B,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,EAAE;IAAE;IACtC,IAAI2B,OAAO,GAAG,IAAIlC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC;IACA,IAAIuC,GAAG,GAAGR,IAAI,CAACO,IAAI,EAAEd,GAAG,CAAC;IACzB;IACA;IACA,IAAIgB,KAAK,GAAG,IAAIjB,IAAI,CAACgB,GAAG,CAAC;IACzB;IACA,IAAIxC,MAAM,GAAG,IAAIC,UAAU,CAACwC,KAAK,CAACpE,YAAY,CAAC;IAC/C,IAAIqE,MAAM,GAAG1C,MAAM,CAACQ,MAAM;IAC1B,IAAIO,GAAG,GAAG,IAAId,UAAU,CAACO,MAAM,CAAC;IAChC,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,MAAM,EAAEhB,CAAC,EAAE,EAAE;MAC7B,IAAIkD,MAAM,KAAK1C,MAAM,CAACQ,MAAM,EAAE;QAC1ByB,UAAU,CAACjC,MAAM,EAAEyC,KAAK,EAAEP,IAAI,EAAEC,OAAO,CAAC;QACxCO,MAAM,GAAG,CAAC;MACd;MACA3B,GAAG,CAACvB,CAAC,CAAC,GAAGQ,MAAM,CAAC0C,MAAM,EAAE,CAAC;IAC7B;IACAD,KAAK,CAAClC,KAAK,EAAE;IACbP,MAAM,CAAC2C,IAAI,CAAC,CAAC,CAAC;IACdR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;IACf,OAAO5B,GAAG;EACd;EACAjD,OAAO,CAACwE,IAAI,GAAGA,IAAI;EACnB;EACA;EACA;EACA;EACA;EACA;EACA,SAASM,MAAM,CAACC,QAAQ,EAAEN,IAAI,EAAEO,UAAU,EAAEC,KAAK,EAAE;IAC/C,IAAIC,GAAG,GAAG,IAAIxB,IAAI,CAACqB,QAAQ,CAAC;IAC5B,IAAI/D,GAAG,GAAGkE,GAAG,CAAC3E,YAAY;IAC1B,IAAI4E,GAAG,GAAG,IAAIhD,UAAU,CAAC,CAAC,CAAC;IAC3B,IAAIiD,CAAC,GAAG,IAAIjD,UAAU,CAACnB,GAAG,CAAC;IAC3B,IAAIS,CAAC,GAAG,IAAIU,UAAU,CAACnB,GAAG,CAAC;IAC3B,IAAIqE,EAAE,GAAG,IAAIlD,UAAU,CAAC8C,KAAK,CAAC;IAC9B,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,GAAG,GAAGiE,KAAK,EAAEvD,CAAC,EAAE,EAAE;MAClC,IAAIP,CAAC,GAAGO,CAAC,GAAG,CAAC;MACbyD,GAAG,CAAC,CAAC,CAAC,GAAIhE,CAAC,KAAK,EAAE,GAAI,IAAI;MAC1BgE,GAAG,CAAC,CAAC,CAAC,GAAIhE,CAAC,KAAK,EAAE,GAAI,IAAI;MAC1BgE,GAAG,CAAC,CAAC,CAAC,GAAIhE,CAAC,KAAK,CAAC,GAAI,IAAI;MACzBgE,GAAG,CAAC,CAAC,CAAC,GAAIhE,CAAC,KAAK,CAAC,GAAI,IAAI;MACzB+D,GAAG,CAAC3C,KAAK,EAAE;MACX2C,GAAG,CAACvC,MAAM,CAAC8B,IAAI,CAAC;MAChBS,GAAG,CAACvC,MAAM,CAACwC,GAAG,CAAC;MACfD,GAAG,CAAClC,MAAM,CAACvB,CAAC,CAAC;MACb,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,GAAG,EAAEW,CAAC,EAAE,EAAE;QAC1ByD,CAAC,CAACzD,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC;MACf;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIqD,UAAU,EAAErD,CAAC,EAAE,EAAE;QAClCuD,GAAG,CAAC3C,KAAK,EAAE;QACX2C,GAAG,CAACvC,MAAM,CAAClB,CAAC,CAAC,CAACuB,MAAM,CAACvB,CAAC,CAAC;QACvB,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,GAAG,EAAEd,CAAC,EAAE,EAAE;UAC1BkF,CAAC,CAAClF,CAAC,CAAC,IAAIuB,CAAC,CAACvB,CAAC,CAAC;QAChB;MACJ;MACA,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,GAAG,IAAIU,CAAC,GAAGV,GAAG,GAAGW,CAAC,GAAGsD,KAAK,EAAEtD,CAAC,EAAE,EAAE;QACjD0D,EAAE,CAAC3D,CAAC,GAAGV,GAAG,GAAGW,CAAC,CAAC,GAAGyD,CAAC,CAACzD,CAAC,CAAC;MAC1B;IACJ;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,GAAG,EAAEU,CAAC,EAAE,EAAE;MAC1B0D,CAAC,CAAC1D,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC,GAAG,CAAC;IACnB;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxByD,GAAG,CAACzD,CAAC,CAAC,GAAG,CAAC;IACd;IACAwD,GAAG,CAACzC,KAAK,EAAE;IACX,OAAO4C,EAAE;EACb;EACArF,OAAO,CAAC8E,MAAM,GAAGA,MAAM;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}